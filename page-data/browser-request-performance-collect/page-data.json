{"componentChunkName":"component---src-templates-post-jsx","path":"/browser-request-performance-collect/","result":{"data":{"markdownRemark":{"html":"<p>性能似乎是编程当中一个永恒的话题，前端也不例外，而前端考虑性能的重要目的是提升用户体验。前端性能可以粗略地分为两部分：传输性能与运行性能。<strong>传输性能</strong>主要就是加载资源的请求耗时，<strong>运行性能</strong>主要就是应用运行时 CPU 耗时、内存及 GPU 内存等。通常在开发阶段，经常使用浏览器开发者工具来查看请求性能，比如查看<code class=\"language-text\">DOMContentLoaded</code>和<code class=\"language-text\">load</code>事件时间，又比如查看某个 AJAX 请求的相关时间。而由于线上产品会被不同地区不同网络条件的用户访问，可能全中国，也可能全球，可能使用电信，也可能使用网通，可能使用光纤，也可能是 4G。因此，要准确地衡量不同用户的请求耗时，就不能简简单单地通过自己的浏览器查看页面。有一种方式是通过遍布全国机房的服务端程序来发起请求统计不同地区请求耗时，但机房网络条件通常都比用户的网络条件好，所以这种方法还是不准确。</p>\n<h2 id=\"相关规范\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E5%85%B3%E8%A7%84%E8%8C%83\" aria-label=\"相关规范 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相关规范</h2>\n<p>因此，<a href=\"https://www.w3.org/webperf/\">W3C Web 性能工作组（W3C Web Performance Working Group）</a>制定了用户测量请求性能的规范：</p>\n<ul>\n<li><a href=\"https://w3c.github.io/hr-time/\">High-Resolution Time</a>：定义了精读可达 5 微秒级别的时间类型，用于更精确的时间衡量。</li>\n<li><a href=\"https://w3c.github.io/navigation-timing/\">Navigation Timing</a>：定义了页面请求性能相关信息。</li>\n<li><a href=\"https://w3c.github.io/resource-timing/\">Resource Timing</a>：定义了页面其他资源请求性能相关信息。</li>\n<li><a href=\"https://w3c.github.io/performance-timeline/\">Performance Timeline</a>：定义了获取性能测量值相关的接口，包括获取页面请求性能与页面资源请求性能相关信息。</li>\n</ul>\n<p>相关规范及发布状态请查看<a href=\"https://bit.ly/w3c-webperf-status\">表格</a>。</p>\n<h3 id=\"high-resolution-time\" style=\"position:relative;\"><a href=\"#high-resolution-time\" aria-label=\"high resolution time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High-Resolution Time</h3>\n<p>该规范主要定义了 <a href=\"https://w3c.github.io/hr-time/#dom-domhighrestimestamp\">DOMHighResTimeStamp</a> 类型，用于存放精读最高可达 5 微秒的时间值，单位是毫秒。至于，为什么精读只能到 5 微妙，是因为<a href=\"https://w3c.github.io/hr-time/#privacy-security\">隐私与安全考虑</a>。</p>\n<p>另外该规范还定义了<code class=\"language-text\">Performance</code>接口以及该接口的实现<code class=\"language-text\">performance</code>全局属性，一些性能相关的接口都挂载这个属性上面。</p>\n<h3 id=\"resource-timing\" style=\"position:relative;\"><a href=\"#resource-timing\" aria-label=\"resource timing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource Timing</h3>\n<p>该规范定义了<code class=\"language-text\">PerformanceResourceTiming</code>接口，这个接口用于页面内资源请求的时间测量。</p>\n<h4 id=\"code-classlanguage-textperformanceresourcetimingcode-接口\" style=\"position:relative;\"><a href=\"#code-classlanguage-textperformanceresourcetimingcode-%E6%8E%A5%E5%8F%A3\" aria-label=\"code classlanguage textperformanceresourcetimingcode 接口 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">PerformanceResourceTiming</code> 接口</h4>\n<p>该接口扩展了 <a href=\"https://www.w3.org/TR/performance-timeline-2/#performanceentry\">PerformanceEntry</a> 接口属性。例如下图展示了 Chrome 58 所支持的属性：</p>\n<p><a href=\"/images/browser-request-performance-collect/PerformanceResourceTiming-attributes.png\"><img src=\"/images/browser-request-performance-collect/PerformanceResourceTiming-attributes.png\" alt=\"PerformanceResourceTiming 接口属性\"></a></p>\n<p>各属性的含义还是比较直观的，下图展示一个请求周期各阶段的划分：</p>\n<p><a href=\"/images/browser-request-performance-collect/resource-timing.png\"><img src=\"/images/browser-request-performance-collect/resource-timing.png\" alt=\"Resource Timing 请求阶段划分\"></a></p>\n<p>具体各属性的含义及属性值详见规范中的<a href=\"https://w3c.github.io/resource-timing/#performanceresourcetiming\">解释</a>。</p>\n<h4 id=\"哪些资源包含在code-classlanguage-textperformanceresourcetimingcode接口里面\" style=\"position:relative;\"><a href=\"#%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90%E5%8C%85%E5%90%AB%E5%9C%A8code-classlanguage-textperformanceresourcetimingcode%E6%8E%A5%E5%8F%A3%E9%87%8C%E9%9D%A2\" aria-label=\"哪些资源包含在code classlanguage textperformanceresourcetimingcode接口里面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>哪些资源包含在<code class=\"language-text\">PerformanceResourceTiming</code>接口里面</h4>\n<p>此接口包括的请求类型有：XMLHttpRequest 对象，HTML 元素 iframe、image、script、object、embed、link[type=\"stylesheet\"]、svg。而 Server Sent Events 和 WebSocket 并不包括，可能是因为这些连接属于“长连接”，而 Fetch API 发起的请求，旧版本浏览器是不支持的。</p>\n<p>具体哪些资源加载应该包含进<code class=\"language-text\">PerformanceResourceTiming</code>，既要看<a href=\"https://w3c.github.io/resource-timing/#resources-included\">规范规定</a>，也要实际测量，各浏览器及各版本支持情况可能不同。</p>\n<h3 id=\"navigation-timing\" style=\"position:relative;\"><a href=\"#navigation-timing\" aria-label=\"navigation timing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Navigation Timing</h3>\n<p>规范定义了<code class=\"language-text\">PerformanceNavigationTiming</code>接口，该接口扩展了<code class=\"language-text\">PerformanceEntry</code>和<code class=\"language-text\">PerformanceResourceTiming</code>接口，下图展示了 Chrome 58 所支持的属性：</p>\n<p><a href=\"/images/browser-request-performance-collect/PerformanceNavigationTiming-attributes.png\"><img src=\"/images/browser-request-performance-collect/PerformanceNavigationTiming-attributes.png\" alt=\"PerformanceNavigationTiming 接口属性\"></a></p>\n<p>各属性的含义还是比较直观的，下图展示一个请求周期各阶段的划分：</p>\n<p><a href=\"/images/browser-request-performance-collect/navigation-timing.png\"><img src=\"/images/browser-request-performance-collect/navigation-timing.png\" alt=\"Navigation Timing 请求阶段划分\"></a></p>\n<h3 id=\"performance-timeline\" style=\"position:relative;\"><a href=\"#performance-timeline\" aria-label=\"performance timeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance Timeline</h3>\n<p><a href=\"https://w3c.github.io/performance-timeline/#extensions-to-the-performance-interface\">Performance Timeline</a> 规范定义了获取页面请求性能即页面资源请求性能信息的接口。</p>\n<p>通常使用下面代码获取页面资源请求性能：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而获取页面请求性能通过：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">performance<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或</span>\nperformance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需浏览器支持 performance.getEntriesByType() 方法，不如 performance.timing 兼容性好</span></code></pre></div>\n<h3 id=\"兼容性\" style=\"position:relative;\"><a href=\"#%E5%85%BC%E5%AE%B9%E6%80%A7\" aria-label=\"兼容性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>兼容性</h3>\n<p><a href=\"http://caniuse.com/#search=performance\">Can I use</a> 网站包含上面规范的兼容性，但是不详细，没有说明规范的各版本支持情况，也不包括 Performance Timeline 兼容性信息。</p>\n<ul>\n<li><a href=\"http://caniuse.com/#feat=high-resolution-time\">High Resolution Time API support</a></li>\n<li><a href=\"http://caniuse.com/#search=nav-timing\">Navigation Timing API support</a></li>\n<li><a href=\"http://caniuse.com/#feat=resource-timing\">Resource Timing support</a></li>\n</ul>\n<h2 id=\"收集请求性能信息\" style=\"position:relative;\"><a href=\"#%E6%94%B6%E9%9B%86%E8%AF%B7%E6%B1%82%E6%80%A7%E8%83%BD%E4%BF%A1%E6%81%AF\" aria-label=\"收集请求性能信息 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>收集请求性能信息</h2>\n<h3 id=\"获取请求性能信息\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%80%A7%E8%83%BD%E4%BF%A1%E6%81%AF\" aria-label=\"获取请求性能信息 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取请求性能信息</h3>\n<p>通过<code class=\"language-text\">performance.timing</code>即可获取当前页面请求性能信息。下面主要说下获取页面资源请求的性能信息注意事项：</p>\n<h4 id=\"resource-timing-包含哪些资源\" style=\"position:relative;\"><a href=\"#resource-timing-%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90\" aria-label=\"resource timing 包含哪些资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource Timing 包含哪些资源</h4>\n<p>理论上所有从服务器请求的资源都被包含进来，但是有一些特殊情况，如 WebSockets、ServerSentEvent、DNS 查询失败、TCP 失败、服务端 4xx/5xx 响应等是否包含。</p>\n<h4 id=\"缓存的资源\" style=\"position:relative;\"><a href=\"#%E7%BC%93%E5%AD%98%E7%9A%84%E8%B5%84%E6%BA%90\" aria-label=\"缓存的资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缓存的资源</h4>\n<p>目前没有办法区分资源是否从缓存中加载的，只不过缓存的资源，一般<code class=\"language-text\">duration</code>值非常小（比如小于 10 毫秒）。</p>\n<h4 id=\"resourcetiming-buffer\" style=\"position:relative;\"><a href=\"#resourcetiming-buffer\" aria-label=\"resourcetiming buffer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ResourceTiming Buffer</h4>\n<p>每个页面文档都有一个 ResourceTiming buffer 用于限制可以包含多少<code class=\"language-text\">PerformanceResourceTiming</code>对象，默认情况下浏览器将此设为 150，这是规范当中建议设置的大小。而实际应用当中虽然页面初次加载请求数一般不会超过 150，但是后面的 AJAX 请求，或者说应用是单页面应用，则通常会超过 150。</p>\n<p>可以使用一个方法监听 <a href=\"https://w3c.github.io/resource-timing/#dom-performance-onresourcetimingbufferfull\">resourcetimingbufferfull</a> 事件，然后当该事件触发时，使用 <a href=\"https://w3c.github.io/resource-timing/#dom-performance-clearresourcetimings\">clearResourceTimings()</a> 来清空已有的数据。如下代码所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'performance'</span> <span class=\"token keyword\">in</span> window <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>getEntriesByType <span class=\"token operator\">===</span>\n    <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bufferFullListener</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> resourceTimings <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    performance<span class=\"token punctuation\">.</span><span class=\"token function\">clearResourceTimings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Send resourceTimings to server</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resourcetimingbufferfull'</span><span class=\"token punctuation\">,</span> bufferFullListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>另外，不可以通过向方法<code class=\"language-text\">setResourceTimingBufferSize(n)</code>传入一个很大的值来避免 buffer 溢出，因为该方法会增加浏览器所需内存。</p>\n<h3 id=\"跨域\" style=\"position:relative;\"><a href=\"#%E8%B7%A8%E5%9F%9F\" aria-label=\"跨域 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>跨域</h3>\n<p>如果请求资源属于跨域请求，那么下面的时间值会被设为<code class=\"language-text\">0</code>：</p>\n<ul>\n<li><code class=\"language-text\">redirectStart</code></li>\n<li><code class=\"language-text\">redirectEnd</code></li>\n<li><code class=\"language-text\">domainLookupStart</code></li>\n<li><code class=\"language-text\">domainLookupEnd</code></li>\n<li><code class=\"language-text\">connectStart</code></li>\n<li><code class=\"language-text\">connectEnd</code></li>\n<li><code class=\"language-text\">requestStart</code></li>\n<li><code class=\"language-text\">responseStart</code></li>\n<li><code class=\"language-text\">secureConnectStart</code></li>\n</ul>\n<p>除非所请求资源的包含合适的响应头部 <a href=\"https://w3c.github.io/resource-timing/#timing-allow-origin\">Timing-Allow-Origin</a> 允许当前文档中的脚本获取请求性能信息。通常服务静态资源（JS、CSS、字体文件等）的 CDN 请求响应应该带上<code class=\"language-text\">Timing-Allow-Origin</code>。</p>\n<h3 id=\"接口设计\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\" aria-label=\"接口设计 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接口设计</h3>\n<p><strong>POST</strong></p>\n<p>由于 Navigation Timing 和 Resource Timing 数据量比较大，所以需要使用 POST 方法，来将数据发送到服务端。实际应用当中，进行请求性能数据收集的服务在独立的域名，其他很多不同域名的应用会进行跨域请求。</p>\n<p><strong>传输格式</strong></p>\n<p>还是因为发送数据量大的原因，可能需要对数据进行压缩，比如使用 gzip、<a href=\"https://github.com/pieroxy/lz-string\">lz-string</a> 或者<a href=\"https://github.com/nicjansma/resourcetiming-compression.js\">自定义压缩算法</a>。</p>\n<h3 id=\"beacon\" style=\"position:relative;\"><a href=\"#beacon\" aria-label=\"beacon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Beacon</h3>\n<p>当用户刷新页面、跳转到另一个页面或者关闭当前页面时，如何将已经收集的性能数据发送到服务端是一个问题。一种常见的思路是通过绑定<code class=\"language-text\">window</code>的<code class=\"language-text\">unload</code>/<code class=\"language-text\">beforeunload</code>事件，当该事件触发时发送一个 Ajax 请求。然而，无论异步 Ajax，还是同步 Ajax 都有缺陷：</p>\n<ul>\n<li>异步 Ajax：使用 Chrome 58 测试发现，在页面刷新或者跳转到另一个页面时，未完成的 Ajax 会被取消。</li>\n<li>同步 Ajax：只有到请求完成之后才会刷新或跳转到另一个页面，从而降低页面跳转性能。</li>\n</ul>\n<p>因此，<a href=\"https://www.w3.org/TR/beacon/\">Beacon</a> 规范就被制定出来解决这个问题，该规范包含了一个<code class=\"language-text\">sendBeacon()</code>方法，该方法在<code class=\"language-text\">navigator</code>上面。一个使用示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Send navigation timing data to server</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span>timing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/timing'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unload'</span><span class=\"token punctuation\">,</span> sendData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>兼容性</strong>： 可以参考 <a href=\"http://caniuse.com/#feat=beacon\">Beacon API in caniuse.com</a>，除了 IE 与 Safari，其他浏览器都在很早就支持了。</p>\n<p><strong>跨域</strong>：可以查看规范的 <a href=\"https://www.w3.org/TR/beacon/#privacy\">Privacy and Security</a> 部分，但是我在实际测试跨域发送 JSON 数据时，Chrome 58 当中不会发送额外的<code class=\"language-text\">OPTIONS</code>请求，而 Firefox 53 发送额外的<code class=\"language-text\">OPTIONS</code>请求，请求相应头部需要包含下面的跨域相关头部。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST\nAccess-Control-Allow-Headers: Content-Type\nAccess-Control-Allow-Credentials: true</code></pre></div>\n<p>另外，使用<code class=\"language-text\">sendBeacon()</code>无法获知请求响应状态，不过这对于数据收集类请求不算问题。</p>\n<h2 id=\"相关链接\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\" aria-label=\"相关链接 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相关链接</h2>\n<ul>\n<li><a href=\"https://w3c.github.io/perf-timing-primer/\">A Primer for Web Performance Timing APIs</a></li>\n<li><a href=\"https://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/\">Resource Timing practical tips</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/understanding-resource-timing?hl=en\">Understanding resource timing</a></li>\n<li><a href=\"http://nicj.net/navigationtiming-in-practice/\">Navigation timing in practice</a></li>\n<li><a href=\"http://nicj.net/resourcetiming-in-practice/\">Resource timing in practice</a></li>\n</ul>\n<h2 id=\"更新日志\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97\" aria-label=\"更新日志 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新日志</h2>\n<ul>\n<li>2017-05-11 修正错误：Firefox 无 bug，跨域请求默认<code class=\"language-text\">credentials: true</code>，且 Chrome 不符合规范。</li>\n<li>2017-05-07 添加 Beacon 部分</li>\n</ul>","timeToRead":9,"excerpt":"性能似乎是编程当中一个永恒的话题，前端也不例外，而前端考虑性能的重要目的是提升用户体验。前端性能可以粗略地分为两部分：传输性能与运行性能。传输性能主要就是加载资源的请求耗时，运行性能主要就是应用运行时 CPU 耗时、内存及 GPU…","frontmatter":{"title":"浏览器请求性能数据","cover":"","date":"2017-05-01","category":"前端","tags":["性能","请求性能"]},"fields":{"slug":"/browser-request-performance-collect/","date":"2017-04-30T16:00:00.000Z"}}},"pageContext":{"slug":"/browser-request-performance-collect/"}},"staticQueryHashes":[]}