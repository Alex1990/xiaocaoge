{"componentChunkName":"component---src-templates-post-jsx","path":"/react-event-system-resolving/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"准备工作\" style=\"position:relative;\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-label=\"准备工作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h2>\n<h3 id=\"如何阅读源码\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81\" aria-label=\"如何阅读源码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何阅读源码</h3>\n<p>如果之前没有读过类似框架（代码规模、技术栈等方面相似）的源码，第一次阅读难免不知所措，毕竟代码量不小，几个小时或一天只能了解大概有哪些东西。我第一次尝试阅读 React 源码就是懵逼的，第二次还是懵逼，所以放弃了好多次，直到第三次有了一些阅读源码的经验积累才突然感觉有所顿悟。当然，之前的放弃也不是无用之功，起码熟悉了哪些包，一些包大概哪些文件，另外还阅读了一些 React Fiber 之类的讲解文章。</p>\n<p>我目前感悟的阅读源码方法是：</p>\n<ul>\n<li><strong>熟悉相关技术栈与依赖</strong>：当然，并非需要全部熟悉，看需要研究源码哪些方面以及研究深度而定。仅对于 React 事件相关的源码来说，可能需要熟悉 DOM 事件相关规范与接口、事件兼容性处理、<a href=\"https://flow.org/\">flow</a>，另外对于移动端原生应用及 React Native 事件相关熟悉更好，这一方面我也不熟悉，所以有一点儿相关的代码暂时略过。如果需要看测试代码，就需要对测试以及 Jest 有一定了解了。</li>\n<li><strong>通读相关源码</strong>：就是熟悉源码文件组织结构，相关模块与函数，关键的数据结构等，通读一两遍相关源码，不需要关注细节实现，实际上裸读代码，有些逻辑与细节就是很难理解。</li>\n<li><strong>构建最简可运行示例与断点调试</strong>：经过简单了解源码之后，还是感觉云里雾里，由于写代码伴随着抽象思考的过程，所以直接阅读抽象之后的代码不容易理解。这时候就需要一个或多个简单具体的示例来帮助理解代码的运行过程，熟悉代码的<strong>调用栈</strong>、<strong>变量（数据）的含义</strong>等。这时候使用浏览器开发者工具的断点调试工具就非常方便，可以查看 <a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/\">Chrome 开发者调试入门</a>，其他浏览器开发者工具调试功能大同小异。我是逐行代码阅读，搞不明白的可能需要反复运行与阅读才行。</li>\n<li><strong>总结核心要点</strong>：经过前面几步对于代码的实现细节已经熟悉，这时候可以通过抽象与归类来将源码划分几个核心要点，然后总结，流程图之类可能有助于此。</li>\n</ul>\n<p>另外，在阅读源码时，编辑器的搜索功能经常使用，尤其是指定目录下高性能搜索。</p>\n<h3 id=\"dom-事件\" style=\"position:relative;\"><a href=\"#dom-%E4%BA%8B%E4%BB%B6\" aria-label=\"dom 事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 事件</h3>\n<p>React 事件系统是对 DOM 事件的抽象与封装，不过核心还是一样，比如事件流（捕获与冒泡）、事件对象接口等类似。完整的 DOM 事件有非常多，React 只是支持了部分常用的，另外，说是 DOM 事件，其实是个模糊的统称，很多事件并不归属于 DOM，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">MDN Event reference</a>。React 主要支持的事件类型有：</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/indices.html#events-2\">HTML Standard - events</a>：主要是文档与元素相关事件，比如表单元素相关事件<code class=\"language-text\">submit</code>、<code class=\"language-text\">reset</code>。</li>\n<li><a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">UI Events</a>：常用的鼠标事件、键盘事件、输入事件等都在该规范中定义。</li>\n<li><a href=\"https://www.w3.org/TR/clipboard-apis/\">Clipboard API and events</a>：粘贴板相关事件。</li>\n<li><a href=\"https://www.w3.org/TR/touch-events/\">Touch Events</a>：触摸事件。</li>\n<li><a href=\"https://www.w3.org/TR/pointerevents\">Pointer Events</a>：指针事件。</li>\n<li><a href=\"https://www.w3.org/TR/css-animations-1/#events\">CSS Animations</a>：CSS 动画事件。</li>\n<li><a href=\"https://drafts.csswg.org/css-transitions/#transition-events\">CSS Transitions</a>：CSS 过渡事件。</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/dnd.html\">Drag and Drop</a>：拖动事件。</li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/media.html\">Media elements</a>：媒体元素（<code class=\"language-text\">video</code>/<code class=\"language-text\">audio</code>)相关事件。</li>\n</ul>\n<p>上面规范定义了相关事件类型接口，事件对象基础属性（是否可冒泡，是否可以被取消等），所有的事件类型接口都直接或间接扩展自<code class=\"language-text\">Event</code>接口。</p>\n<h3 id=\"dom-事件兼容性处理\" style=\"position:relative;\"><a href=\"#dom-%E4%BA%8B%E4%BB%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86\" aria-label=\"dom 事件兼容性处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 事件兼容性处理</h3>\n<p>作为浏览器当中的框架，对于跨浏览器处理是重要的一部分，DOM 事件兼容性处理主要有：</p>\n<ul>\n<li>事件对象属性：比如键盘事件的<code class=\"language-text\">keyCode</code>。</li>\n<li>事件类型：比如<code class=\"language-text\">mouseenter</code>和<code class=\"language-text\">mouseleave</code>事件。</li>\n<li>事件代理：比如<code class=\"language-text\">blur</code>/<code class=\"language-text\">focus</code>事件，因为不冒泡，所以采用了捕获和<code class=\"language-text\">focusin</code>/<code class=\"language-text\">focusout</code>事件来实现事件代理，参见 <a href=\"https://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\">Delegating the focus and blur events</a>。</li>\n</ul>\n<p>关于 DOM 事件兼容性的处理已经比较成熟，有很多资源参考：</p>\n<ul>\n<li>jQuery 处理；</li>\n<li>《JavaScript 忍者秘籍》：jQuery 作者写的书，里面有事件处理相关内容；</li>\n<li><a href=\"www.quirksmode.org\">quirksmode</a>：</li>\n<li><a href=\"http://help.dottoro.com/ljtdqwlx.php\">Dottoro Web Reference</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">MDN Event reference</a></li>\n</ul>\n<p>上面一些资源包含了不少 IE8/9 相关兼容性处理，而现在 IE8/9 也几乎退出历史舞台了。但是，无论参考哪些，最终都需要在实际的运行环境当中测试兼容性方案才行。</p>\n<h3 id=\"flow\" style=\"position:relative;\"><a href=\"#flow\" aria-label=\"flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flow</h3>\n<p><a href=\"https://flow.org/\">Flow</a> 是使得 JavaScript 可以使用静态类型，便于写接口，与 TypeScript 类似。具有静态语言学习背景的话，很容易理解，即使不懂 flow 也不太影响阅读 React 源码。</p>\n<h2 id=\"react-事件系统\" style=\"position:relative;\"><a href=\"#react-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"react 事件系统 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 事件系统</h2>\n<p><strong>下面均以 react@v16.7.0 版本源码为基准</strong>。</p>\n<h3 id=\"源码文件结构\" style=\"position:relative;\"><a href=\"#%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\" aria-label=\"源码文件结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码文件结构</h3>\n<p>React 源码采用了一种称为 <a href=\"http://danluu.com/monorepo/\">monorepo</a> 的组织方式，通过 yarn 的 <a href=\"https://yarnpkg.com/en/docs/workspaces\">workspaces</a> 功能来实现。简单来说就是一个代码仓库里面包含多个 npm 包，可以查看 <a href=\"https://github.com/facebook/react/tree/master/packages\">react/packages</a> 目录，React 事件相关的主要有 <a href=\"https://github.com/facebook/react/tree/v16.7.0/packages/events\">packages/events</a> 和 <a href=\"https://github.com/facebook/react/tree/v16.7.0/packages/react-dom\">packages/react-dom</a>。</p>\n<p><strong><a href=\"https://github.com/facebook/react/tree/v16.7.0/packages/events\">packages/events</a></strong></p>\n<p>该模块主要包含：</p>\n<ul>\n<li>\n<p>相关类型定义</p>\n<ul>\n<li><code class=\"language-text\">PluginModuleType.js</code>：事件模块类型；</li>\n<li><code class=\"language-text\">ReactSyntheticEventType.js</code>：合成事件（<code class=\"language-text\">SyntheticEvent</code>）相关类型；</li>\n<li><code class=\"language-text\">ResponderTopLevelEventTypes.js</code>：Responder 相关事件类型；</li>\n<li><code class=\"language-text\">TopLevelEventTypes.js</code>：事件类型的静态类型；</li>\n</ul>\n</li>\n<li>\n<p>事件插件机制</p>\n<ul>\n<li><code class=\"language-text\">EventPluginHub.js</code>：事件插件注入、事件对象提取与派发等；</li>\n<li><code class=\"language-text\">EventPluginRegistry.js</code>：事件插件注册、已注册 React 事件名称列表等；</li>\n<li><code class=\"language-text\">EventPluginUtils.js</code>：事件派发及一些辅助函数；</li>\n</ul>\n</li>\n<li>\n<p>事件流</p>\n<ul>\n<li><code class=\"language-text\">EventPropagators.js</code>：事件（派发）流相关；</li>\n</ul>\n</li>\n<li>\n<p>辅助函数：下面三个文件各定义了一个函数，兼顾了数据为单个对象和数组情况。</p>\n<ul>\n<li><code class=\"language-text\">accumulate.js</code>：合并两个数据成为一个数组；</li>\n<li><code class=\"language-text\">accumulateInto.js</code>：将一个数据合并到另一个数组数据当中;</li>\n<li><code class=\"language-text\">forEachAccumulated.js</code>：对一组数据遍历执行指定回调函数；</li>\n</ul>\n</li>\n<li>\n<p>React Native Responder System 相关：对 React Native 不熟悉，暂不考虑这部分代码。</p>\n<ul>\n<li><code class=\"language-text\">ResponderEventPlugin.js</code></li>\n<li><code class=\"language-text\">ResponderSyntheticEvent.js</code></li>\n<li><code class=\"language-text\">ResponderTopLevelEventTypes.js</code></li>\n<li><code class=\"language-text\">ResponderTouchHistoryStore.js</code></li>\n</ul>\n</li>\n</ul>\n<p>react-dom 模块当中与事件系统相关的代码主要有<code class=\"language-text\">react-dom/src/events</code>目录和<code class=\"language-text\">react-dom/src/client</code>目录当中的部分文件。</p>\n<p><strong><a href=\"https://github.com/facebook/react/tree/v16.7.0/packages/react-dom/src/events\">packages/react-dom/src/events</a></strong></p>\n<ul>\n<li>\n<p>不同类型的合成事件接口</p>\n<ul>\n<li><code class=\"language-text\">SyntheticAnimationEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticClipboardEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticCompositionEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticDragEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticFocusEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticInputEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticKeyboardEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticMouseEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticPointerEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticTouchEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticTransitionEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticUIEvent.js</code></li>\n<li><code class=\"language-text\">SyntheticWheelEvent.js</code></li>\n</ul>\n</li>\n<li>\n<p>事件插件：每一个事件插件都包含支持的事件类型列表<code class=\"language-text\">eventTypes</code>和提取合成事件对象的方法<code class=\"language-text\">extractEvents</code>。</p>\n<ul>\n<li><code class=\"language-text\">BeforeInputEventPlugin.js</code>：输入相关事件；</li>\n<li><code class=\"language-text\">ChangeEventPlugin.js</code>：表单元素<code class=\"language-text\">onChange</code>事件；</li>\n<li><code class=\"language-text\">DOMEventPluginOrder.js</code>：事件插件排序列表，用于控制不同类型事件触发顺序；</li>\n<li><code class=\"language-text\">EnterLeaveEventPlugin.js</code>：<code class=\"language-text\">mouseenter</code>/<code class=\"language-text\">mouseleave</code>事件；</li>\n<li><code class=\"language-text\">SelectEventPlugin.js</code>：选区相关事件；</li>\n<li><code class=\"language-text\">SimpleEventPlugin.js</code>：大部分的事件类型都位于这里，比如键盘事件、鼠标事件、触摸事件、媒体事件等；</li>\n</ul>\n</li>\n<li>\n<p>事件兼容性处理：兼容性处理代码不限于下面代码，实际上事件插件包含不少兼容性相关处理。</p>\n<ul>\n<li><code class=\"language-text\">FallbackCompositionState.js</code></li>\n<li><code class=\"language-text\">getEventCharCode.js</code></li>\n<li><code class=\"language-text\">getEventKey.js</code></li>\n<li><code class=\"language-text\">getEventModifierState.js</code></li>\n<li><code class=\"language-text\">getEventTarget.js</code></li>\n<li><code class=\"language-text\">getVendorPrefixedEventName.js</code></li>\n<li><code class=\"language-text\">isEventSupported.js</code></li>\n</ul>\n</li>\n<li>\n<p>事件绑定与触发</p>\n<ul>\n<li><code class=\"language-text\">EventListener.js</code></li>\n<li><code class=\"language-text\">ReactBrowserEventEmitter.js</code></li>\n<li><code class=\"language-text\">ReactDOMEventListener.js</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><a href=\"https://github.com/facebook/react/tree/v16.7.0/packages/react-dom/src/client\">packages/react-dom/src/client</a></strong></p>\n<ul>\n<li><code class=\"language-text\">ReactDOMClientInjection.js</code>：事件注入及一些辅助方法注入。</li>\n<li><code class=\"language-text\">ReactDOMComponent.js</code>：事件绑定。</li>\n<li><code class=\"language-text\">ReactDOMComponentTree.js</code>：一些相关方法定义。</li>\n</ul>\n<h3 id=\"事件流程\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B\" aria-label=\"事件流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件流程</h3>\n<p>React 整个事件流程按时间顺序可以分为三个环节：</p>\n<h4 id=\"事件系统初始化\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\" aria-label=\"事件系统初始化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件系统初始化</h4>\n<p>该环节主要是注入事件插件与辅助函数。</p>\n<p>应用开始执行时，首先加载<code class=\"language-text\">react-dom/src/client/ReactDOM.js</code>里面的代码，其执行过程中执行<code class=\"language-text\">react-dom/src/client/ReactDOMClientInjection.js</code>文件，该文件调用事件插件注入代码和辅助函数注入代码。</p>\n<ul>\n<li>\n<p><strong>事件插件类型</strong></p>\n<p>可以查看<code class=\"language-text\">events/PluginModuleType.js</code>来了解事件插件类型定义，主要包括一个<code class=\"language-text\">eventTypes</code>列表和<code class=\"language-text\">extractEvents</code>方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PluginModule<span class=\"token operator\">&lt;</span>NativeEvent<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\neventTypes<span class=\"token operator\">:</span> EventTypes<span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">extractEvents</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">topLevelType<span class=\"token operator\">:</span> TopLevelType<span class=\"token punctuation\">,</span>\n  targetInst<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> Fiber<span class=\"token punctuation\">,</span>\n  nativeTarget<span class=\"token operator\">:</span> NativeEvent<span class=\"token punctuation\">,</span>\n  nativeEventTarget<span class=\"token operator\">:</span> EventTarget<span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">?</span>ReactSyntheticEvent<span class=\"token punctuation\">,</span>\ntapMoveThreshold<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后，<code class=\"language-text\">react-dom/src/events</code>目录下的<code class=\"language-text\">*Plugin.js</code>类文件是具体的插件实现，比如<code class=\"language-text\">SimpleEventPlugin.js</code>。</p>\n</li>\n<li>\n<p><strong>事件插件注入</strong>：通过引入，最终是调用<code class=\"language-text\">events/EventPluginRegistry.js</code>文件里面的<code class=\"language-text\">injectEventPluginOrder</code>与<code class=\"language-text\">injectEventPluginsByName</code>两个函数完成的。这两个函数执行完成之后，主要处理了事件插件数据（可以把事件插件当做数据），初始化了下面几个对外变量，用于后面的事件派发：</p>\n<ul>\n<li><code class=\"language-text\">eventPluginOrder</code>：事件插件顺序定义；</li>\n<li><code class=\"language-text\">plugins</code>：事件插件；</li>\n<li><code class=\"language-text\">eventNameDispatchConfigs</code>：React 事件名称（比如<code class=\"language-text\">click</code>）到 React 事件派发配置映射；</li>\n<li><code class=\"language-text\">registrationNameModules</code>：React 事件注册名称（比如<code class=\"language-text\">onClick</code>/<code class=\"language-text\">onClickCapture</code>）到事件插件映射；</li>\n<li><code class=\"language-text\">registrationNameDependencies</code>：React 事件注册名称到依赖的原生 DOM 事件名称映射。</li>\n</ul>\n</li>\n<li>\n<p><strong>辅助函数注入</strong>：主要定义了三个事件处理过程当中使用的三个辅助函数。</p>\n<ul>\n<li><code class=\"language-text\">getFiberCurrentPropsFromNode</code>：获取指定 DOM 节点对应的事件监听器数据；</li>\n<li><code class=\"language-text\">getInstanceFromNode</code>：获取指定 DOM 节点对应 Virtual DOM 当中的节点；</li>\n<li><code class=\"language-text\">getNodeFromInstance</code>：获取指定 Virtual DOM 节点对应的 DOM 节点。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"事件监听器处理\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8%E5%A4%84%E7%90%86\" aria-label=\"事件监听器处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件监听器处理</h4>\n<p>应用初始化时，调用<code class=\"language-text\">ReactDOM.render</code>方法，然后会经过<code class=\"language-text\">react-reconciler</code>（React Fiber）里面的一系列函数调用，创建 Virtual DOM 节点（FiberNode），处理对应的节点属性（React props），也包括事件监听器的处理：存储事件监听器与绑定事件。</p>\n<ul>\n<li>\n<p><strong>事件监听器存储</strong></p>\n<p>通过调用<code class=\"language-text\">react-dom/src/client/ReactDOMComponentTree.js</code>的<code class=\"language-text\">updateFiberProps</code>函数将事件监听器存储到节点的某个属性当中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> randomKey <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> internalEventHandlersKey <span class=\"token operator\">=</span> <span class=\"token string\">'__reactEventHandlers$'</span> <span class=\"token operator\">+</span> randomKey<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateFiberProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nnode<span class=\"token punctuation\">[</span>internalEventHandlersKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>事件绑定</strong></p>\n<p>事件绑定处理通过<code class=\"language-text\">react-dom/src/client/ReactDOMComponent.js</code>的<code class=\"language-text\">setInitialProperties</code>方法来完成。对于不可冒泡的事件（比如<code class=\"language-text\">img</code>标签的<code class=\"language-text\">load</code>事件，<code class=\"language-text\">video</code>元素的媒体事件），React 会直接绑定到对应的 DOM 节点上；对于可冒泡的事件，React 会通过事件代理来处理，会监听<code class=\"language-text\">rootContainerElement</code>上面的事件，目前是<code class=\"language-text\">document</code>，以后可能会变成 React 应用挂载的根节点。</p>\n<p>事件绑定涉及到<code class=\"language-text\">react-dom/src/events/ReactDOMEventListener.js</code>文件里面的<code class=\"language-text\">trapBubbledEvent</code>/<code class=\"language-text\">trapCapturedEvent</code>以及<code class=\"language-text\">react-dom/src/events/ReactBrowserEventEmitter.js</code>里面的<code class=\"language-text\">listenTo</code>等函数。最终是通过<code class=\"language-text\">react-dom/src/events/EventListener.js</code>里面的两个函数，实际上就是调用 DOM 的<code class=\"language-text\">addEventListener</code>方法。但是第二个参数<code class=\"language-text\">listener</code>并不是 React props 的值，而是<code class=\"language-text\">react-dom/src/events/ReactDOMEventListener.js</code>里面的<code class=\"language-text\">dispatchInteractiveEvent</code>或<code class=\"language-text\">dispatchEvent</code>函数。</p>\n</li>\n</ul>\n<h4 id=\"事件派发\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6%E6%B4%BE%E5%8F%91\" aria-label=\"事件派发 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件派发</h4>\n<p>下面以简单的一个按钮元素<code class=\"language-text\">&lt;button&gt;</code>的<code class=\"language-text\">click</code>事件为例。</p>\n<ul>\n<li><strong>合成事件创建</strong></li>\n</ul>\n<p>当<code class=\"language-text\">click</code>事件触发时，会冒泡到<code class=\"language-text\">document</code>，从而触发绑定在其上的监听器，就是<code class=\"language-text\">react-dom/src/client/ReactDOMEventListener.js</code>文件当中的<code class=\"language-text\">dispatchInteractiveEvent</code>函数，然后经过几个函数处理会依次调用该文件当中的<code class=\"language-text\">dispatchEvent</code>和<code class=\"language-text\">handleTopLevel</code>函数。</p>\n<p>紧接着依次调用<code class=\"language-text\">events/EventPluginHub.js</code>文件里面的<code class=\"language-text\">runExtractEventsInBatch</code>、<code class=\"language-text\">extractEvents</code>方法。在<code class=\"language-text\">extractEvents</code>方法当中，依次调用已注入插件的<code class=\"language-text\">extractEvents</code>方法，当然，对于<code class=\"language-text\">click</code>事件真正起作用的只有<code class=\"language-text\">SimpleEventPlugin</code>插件。在该插件当中会通过合成事件（SyntheticEvent）的相应构造器来创建合成事件，<code class=\"language-text\">click</code>事件对应<code class=\"language-text\">SyntheticMouseEvent</code>构造器。</p>\n<p><code class=\"language-text\">SimpleEventPlugin</code>插件包含 React 事件与 DOM 事件一一对应。而 React 事件与 DOM 事件不止一一对应关系，可以阅读其他事件插件代码了解更多。</p>\n<ul>\n<li><strong>事件派发预处理</strong></li>\n</ul>\n<p>创建合成事件之后，大部分事件插件都会调用<code class=\"language-text\">events/EventPropagators.js</code>文件的<code class=\"language-text\">accumulateTwoPhaseDispatches</code>函数。调用该函数的作用是为了收集合成事件传播过程当中涉及到的节点和监听器，存放于合成事件对象的<code class=\"language-text\">event._dispatchListeners</code>和<code class=\"language-text\">event._dispatchInstances</code>属性当中。注意，该处理过程是按照事件流顺序来处理的，首先是捕获阶段（从应用的根节点到目标节点），然后是冒泡阶段（从目标节点到应用的根节点）。可以查看<code class=\"language-text\">shared/ReactTreeTraversal.js</code>的<code class=\"language-text\">traverseTwoPhase</code>方法。</p>\n<ul>\n<li><strong>派发事件</strong></li>\n</ul>\n<p>经过上面的处理之后，会调用<code class=\"language-text\">events/EventPluginHub.js</code>文件中的<code class=\"language-text\">runEventsInBatch</code>函数，然后对事件队列当中的每个事件调用<code class=\"language-text\">events/EventPluginUtils.js</code>文件中的<code class=\"language-text\">executeDispatchesInOrder</code>函数来按照事件流顺序执行事件对应的监听器。</p>\n<h3 id=\"开发者模式代码\" style=\"position:relative;\"><a href=\"#%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%E4%BB%A3%E7%A0%81\" aria-label=\"开发者模式代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开发者模式代码</h3>\n<p>React 当中包含了大量的提升开发者体验的代码，比如输出在控制台的警告信息。这些代码大部分只在开发环境有效，打包到生产环境会被删除，是通过 Webpack 和 Uglify 来实现的。</p>\n<p>一些警告信息还会带网页地址，可以查看最新的更详细的说明，这种方式很不错，既不会太占源码体积，又可以查看到更详细的说明。</p>\n<h3 id=\"合成事件\" style=\"position:relative;\"><a href=\"#%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6\" aria-label=\"合成事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>合成事件</h3>\n<p>合成事件（Synthetic events）对象通过一系列定义的合成事件类来创建，类比于 DOM 事件规范中定义的接口。最顶部是<code class=\"language-text\">SyntheticEvent</code>类，然后是其他子类，一直继承下来，比如<code class=\"language-text\">SyntheticUIEvent</code>继承自<code class=\"language-text\">SyntheticEvent</code>，<code class=\"language-text\">SyntheticMouseEvent</code>继承自<code class=\"language-text\">SyntheticUIEvent</code>。继承是通过类的静态方法<code class=\"language-text\">extend</code>来显示的，下面为<code class=\"language-text\">extend</code>方法定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">SyntheticEvent<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">extend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Interface</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Super <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">E</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">E</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">Super</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Super</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">;</span>\n\n  Class<span class=\"token punctuation\">.</span>Interface <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Super<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> Interface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Class<span class=\"token punctuation\">.</span>extend <span class=\"token operator\">=</span> Super<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">addEventPoolingTo</span><span class=\"token punctuation\">(</span>Class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> Class<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的代码还实现了类的静态属性<code class=\"language-text\">Interface</code>的继承，通过类似于<code class=\"language-text\">mixins</code>的机制。<code class=\"language-text\">Interface</code>属性是个对象，包含了该类实例包含哪些属性和方法。</p>\n<h2 id=\"后记\" style=\"position:relative;\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-label=\"后记 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后记</h2>\n<p>在一开始阅读代码时，我试图搜索过一些相关的源码解读文章，发现要么是简单地通过注释形式说明一下每行代码做什么的，要么就是画个流程图，然后说明下每个核心部分如何工作的，有些文章会加上几张图片。但是，我总觉得单纯的文本和图片形式不能很好地传递源码运行信息，我这篇文章同样如此，毕竟我们都是通过阅读代码、调试工具等结合理解代码的运行。假如有一种可以<strong>交互式</strong>展现代码运行过程的工具可能有助于更好地理解，次一点儿动画也可以。</p>\n<p>PS. 写完此文发现一篇不错的文章<a href=\"https://www.lzane.com/tech/react-event-system-and-source-code/\">REACT事件系统和源码浅析</a></p>\n<h3 id=\"实例代码运行过程录制工具\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%BD%95%E5%88%B6%E5%B7%A5%E5%85%B7\" aria-label=\"实例代码运行过程录制工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实例代码运行过程录制工具</h3>\n<p>通过构建最简化可运行示例，并结合浏览器开发者工具的断点调试来理解代码运行过程是一个最实用有效的方法。其中关键的信息有：函数调用栈、参数值、变量值、代码具体逻辑等，但是文本与图片形式并不适合展现该过程。另外，目前的浏览器调试工具，假如选择逐行运行，会不断在源文件里面跳来跳去，并不是按顺序一样连贯的。</p>\n<p>Chrome 开发者工具是根据 <a href=\"https://chromedevtools.github.io/devtools-protocol/tot/Debugger\">Chrome DevTools Protocol</a> 来开发的，我们可以通过 <a href=\"https://github.com/GoogleChrome/puppeteer\">puppeteer</a> 和该协议规范做一些有用的工具。自动化逐行运行代码，并把调用栈与变量值等信息保存下来，然后在写一个工具播放这些信息。这个我还没有尝试过，但是大致看了一下，可行性很大。</p>\n<h3 id=\"模块及模块依赖关系可视化工具\" style=\"position:relative;\"><a href=\"#%E6%A8%A1%E5%9D%97%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7\" aria-label=\"模块及模块依赖关系可视化工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>模块及模块依赖关系可视化工具</h3>\n<p>React 包含了几十上百个模块（文件），之间的依赖关系需要花一段时间才能理清。可以通过 <a href=\"https://babeljs.io/docs/en/next/babel-parser.html\">@babel/parser</a> 工具来静态将源码解析为 AST（抽象语法树），然后通过处理分析该 AST 获取各模块的依赖关系、每个模块定义的函数等信息，并通过可视化工具（如 D3.js）来可视化展示。依赖关系是一个网络，从可视化的网络图可以直观地看出哪些是关键模块（依赖或被依赖关系最多）、哪些是最底层的模块（不依赖任何其他模块）等信息。</p>\n<h2 id=\"更多资源\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%A4%9A%E8%B5%84%E6%BA%90\" aria-label=\"更多资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更多资源</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=dRo_egw7tBc&#x26;t=8s\">React events in depth w/ Kent C. Dodds, Ben Alpert, &#x26; Dan Abramov</a></li>\n</ul>","timeToRead":18,"excerpt":"准备工作 如何阅读源码 如果之前没有读过类似框架（代码规模、技术栈等方面相似）的源码，第一次阅读难免不知所措，毕竟代码量不小，几个小时或一天只能了解大概有哪些东西。我第一次尝试阅读 React…","frontmatter":{"title":"React 事件系统解析","cover":"","date":"2019-02-12","category":"前端","tags":["React","事件系统"]},"fields":{"slug":"/react-event-system-resolving/","date":"2019-02-11T16:00:00.000Z"}}},"pageContext":{"slug":"/react-event-system-resolving/"}},"staticQueryHashes":[]}