{"componentChunkName":"component---src-templates-post-jsx","path":"/gitlab-ci-setup/","result":{"data":{"markdownRemark":{"html":"<p>如今，不少中小公司都采用开源的 Gitlab 来管理公司的源码了，但是并没有充分利用 Gitlab 提供的功能。比如 Gitlab CI，不少公司没有使用或者不是所有的开发者都了解并使用了，而且也没有使用其他的 CI/CD 平台。其构建和部署流程比较原始，比如前端代码，开发者首先需要在本地构建打包，然后推送到对应的源码仓库，这导致了开发者经常需要等待构建完成，而且源码仓库的体积越来越大。又比如，前端代码的部署流程，或者采用手动<code class=\"language-text\">git pull</code>代码方式，或者使用<code class=\"language-text\">cron</code>来定时执行<code class=\"language-text\">git pull</code>，前者需要登录到服务器手动执行，后者不断<code class=\"language-text\">git pull</code>造成很多资源浪费。另外，这些手动的方式也不能很好地与其他流程继承，不利于流程自动化。而采用易搭建的 Gitlab CI 可以解决这些问题，另外也可以提供一些其他的优势。</p>\n<h2 id=\"gitlab-ci-流程图\" style=\"position:relative;\"><a href=\"#gitlab-ci-%E6%B5%81%E7%A8%8B%E5%9B%BE\" aria-label=\"gitlab ci 流程图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gitlab CI 流程图</h2>\n<p><img src=\"/images/gitlab-ci-setup/gitlab-ci-workflow.jpg\" alt=\"Gitlab CI 流程图\"></p>\n<h2 id=\"优势\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E5%8A%BF\" aria-label=\"优势 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优势</h2>\n<ul>\n<li>通过<code class=\"language-text\">commit</code>/<code class=\"language-text\">tag</code>等方式自动触发测试、构建或部署。</li>\n<li>远程服务器执行测试与构建，节省本地计算资源。</li>\n<li>Gitlab 仓库不再管理打包后文件，避免仓库过大问题。</li>\n<li>可以方便地进行代码规范检测、单元测试等，使代码更可靠。</li>\n</ul>\n<h2 id=\"风险控制\" style=\"position:relative;\"><a href=\"#%E9%A3%8E%E9%99%A9%E6%8E%A7%E5%88%B6\" aria-label=\"风险控制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>风险控制</h2>\n<p>主要是部署的权限控制方面，通过分支管理可以避免：</p>\n<ul>\n<li>假设<code class=\"language-text\">release</code>分支为生产版本，<code class=\"language-text\">test</code>为测试版本；</li>\n<li>只有<code class=\"language-text\">git push</code>到<code class=\"language-text\">release</code>分支的才会触发部署到线上，且这个操作只能<strong>指定人</strong>来做，这个通过 Gitlab 的成员权限管理与<code class=\"language-text\">Protected branches</code>来完成；<code class=\"language-text\">test</code>分支每个人都可以进行<code class=\"language-text\">git push</code>；</li>\n</ul>\n<h2 id=\"搭建流程\" style=\"position:relative;\"><a href=\"#%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B\" aria-label=\"搭建流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭建流程</h2>\n<ul>\n<li>登录远程服务器。</li>\n<li>安装 <a href=\"https://www.docker.com/\">Docker</a>，根据服务器操作系统查看相应<a href=\"https://docs.docker.com/engine/installation/\">安装文档</a>，选择 Docker CE 版本，而非 Docker EE 版本。</li>\n<li>选择 <a href=\"https://docs.docker.com/glossary/?term=image\">Image</a>，前端构建工具通常都是基于 Nodejs，所以选择<a href=\"https://store.docker.com/images/node\">node image</a>，版本目前可选择<code class=\"language-text\">6.10.3</code>。</li>\n<li>安装 <a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner\">gitlab-ci-multi-runner</a>，这个就是 Gitlab Runner。需要注意版本问题，通过公司 Gitlab 网站页面【左侧菜单】-【Help】可以查看到当前使用的 Gitlab 版本，而 Gitlab Runner >= 9.0 需要 Gitlab CE/EE 9.0，所以只能安装以前的版本。通过 <a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/tags\">gitlab-ci-multi-runner tags</a> 查看到当前 9.0 之前最新的版本（文档写时为<code class=\"language-text\">v1.11.4</code>），可以参考<a href=\"https://docs.gitlab.com/runner/install/\">相应安装文档</a>安装，也可以<a href=\"https://docs.gitlab.com/runner/install/bleeding-edge.html#download-any-other-tagged-release\">下载现成的包</a>，注意版本问题。</li>\n<li>Gitlab Runner 配置请查看<a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html\">文档</a></li>\n<li>注册项目，运行命令<code class=\"language-text\">gitlab-runner register</code>，根据提示填写相关信息，这些信息位于 Gitlab 项目的【设置菜单】-【Runners】页面。</li>\n<li>运行<code class=\"language-text\">gitlab-runner run</code>启动，如果要开机启动可以查看 <a href=\"https://docs.gitlab.com/runner/commands/README.html#service-related-commands\">service-related-commands</a> 页面，或使用其他 service 管理工具，<code class=\"language-text\">gitlab-runner</code>命令文档请查看 <a href=\"https://docs.gitlab.com/runner/commands/README.html\">GitLab Runer Commands</a>。</li>\n<li>项目配置，通过 <a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\">.gitlab-ci.yml</a> 文件配置 CI 要执行的任务等，其中<code class=\"language-text\">image</code>推荐配置成<code class=\"language-text\">image: node:6.10.3</code>，如果你清楚这个配置项，可自行选择，另外可以通过 <a href=\"https://gitlab-wenba.xueba100.com:2443/ci/lint\">CI Lint</a> 页面校验<code class=\"language-text\">.gitlab-ci.yml</code>文件。</li>\n<li>有时需要建立构建环境（这里是 Docker 容器）与其他服务器的 SSH 认证，比如编译后代码<code class=\"language-text\">git push</code>到 Gitlab，又或者打包后文件复制到服务器上面，可以查看 <a href=\"https://gitlab.com/help/ci/ssh_keys/README.md\">Using SSH keys</a>，来进行配置。</li>\n</ul>\n<h2 id=\"部署\" style=\"position:relative;\"><a href=\"#%E9%83%A8%E7%BD%B2\" aria-label=\"部署 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>部署</h2>\n<p>部署需求：</p>\n<ul>\n<li>将文件部署到目标机器，目标机器列表可方便配置</li>\n<li>回滚</li>\n<li>操作日志</li>\n</ul>\n<p>一种简单但是简陋的方案是通过<code class=\"language-text\">scp</code>或<code class=\"language-text\">rsync</code>复制到服务器，这种方式不能直接回滚。另外，目标机器列表不可以方便配置与更新。</p>\n<p>目前已经有很多成熟的开源部署方案，比如 Puppet 或 Ansible（具体使用个人不了解）。可以通过 Gitlab CI 的 <a href=\"https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html\">artifacts</a> 功能，将构建打包后的文件存储到 Gitlab，然后有了打包后文件的下载链接，则可以方便地与其他部署平台集成。而且代码的部署经常也是运维负责的，具体部署方案经常是运维选择的。另外，一些公司会自建部署平台，会集成流程审核，更规范一些。</p>\n<h2 id=\"相关链接\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\" aria-label=\"相关链接 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相关链接</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/installation/\">Docker Installation</a></li>\n<li><a href=\"https://store.docker.com/\">Docker Store</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/\">Gitlab CI Docs</a></li>\n<li><a href=\"https://docs.gitlab.com/runner/install/index.html\">Gitlab Runner Install</a></li>\n<li><a href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration.html\">Gitlab Runner Configuration</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\">.gitlab-ci.yml</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/runners/README.html\">Gitlab Runner</a></li>\n<li><a href=\"https://gitlab.com/help/ci/ssh_keys/README.md\">Gitlab CI SSH Keys</a></li>\n<li><a href=\"https://docs.gitlab.com/runner/commands/README.html\">Gitlab Runner Commands</a></li>\n<li><a href=\"https://docs.gitlab.com/runner/executors/README.html\">Gitlab Runner Executors</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21068773/checking-of-gitlab-version\">Checking of Gitlab Version</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ssh/README.html\">Gitlab SSH Docs</a></li>\n<li><a href=\"https://gitlab-wenba.xueba100.com:2443/ci/lint\">.gitlab-ci.yml 校验</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html\">Introduction to job artifacts</a></li>\n</ul>","timeToRead":5,"excerpt":"如今，不少中小公司都采用开源的 Gitlab 来管理公司的源码了，但是并没有充分利用 Gitlab 提供的功能。比如 Gitlab CI，不少公司没有使用或者不是所有的开发者都了解并使用了，而且也没有使用其他的 CI/CD…","frontmatter":{"title":"Gitlab CI 搭建指引","cover":"","date":"2018-10-21","category":"软件工程","tags":["Gitlab","CI","CD","构建","部署","自动化"]},"fields":{"slug":"/gitlab-ci-setup/","date":"2018-10-20T16:00:00.000Z"}}},"pageContext":{"slug":"/gitlab-ci-setup/"}},"staticQueryHashes":[]}