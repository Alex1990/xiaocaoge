{"componentChunkName":"component---src-templates-post-jsx","path":"/rendering-tex/","result":{"data":{"markdownRemark":{"html":"<p>我在写博客主题时，经常会列出来可能会使用哪些信息表现形式，几乎所有内容发布平台都支持的有：文字、图片、超链接。但是，我作为编程人员，代码也应当支持。然后，还有很多其他形式要考虑：音频、视频、公式等等，不仅仅要支持，还要考虑支持到什么程度，用户体验会更好些。大体上，信息可能会有如下表现形式：</p>\n<ul>\n<li>文字</li>\n<li>图片</li>\n<li>表格</li>\n<li>音频</li>\n<li>视频</li>\n<li>公式</li>\n<li>代码</li>\n<li>等等</li>\n</ul>\n<p>另外，还有可编辑代码、可交互式动画、VR 等表现形式，乃至游戏也算一种。不过有些几乎所有场景都需要的，有些特定场景才需要。</p>\n<p>公式作为知识的重要组成部分，很多场景也都需要，尤其数学和物理相关领域，比如百科网站、问答网站、在线教育网站、内容发布平台、论文、书籍等。而现在信息展现的媒介也是多种多样，有书籍、电脑、平板、手机等。一些与公式展示相关的指标有：网络传输速率、屏幕尺寸、像素密度、字体的支持等。</p>\n<p>公式通常使用特定的标记语言来书写，比如 TeX。<a href=\"https://en.wikipedia.org/wiki/TeX\">TeX</a> 是数学家和计算机科学家 <a href=\"https://en.wikipedia.org/wiki/Donald_Knuth\">Donald Knuth</a> 设计的一个排版系统，广泛用于数学、计算机科学等领域的公式排版。</p>\n<p>公式的渲染要考虑下面问题：</p>\n<ul>\n<li>屏幕尺寸：从手机到宽屏桌面显示器，也包括书籍。</li>\n<li>屏幕像素密度：有时公式可能以栅格图片展示，要考虑到高像素密度屏幕，随着技术发展也会越来越高。</li>\n<li>性能：我们可能会一次性渲染很多公式，也包括非常复杂的公式，我们期望能尽快高质量将渲染好的公式呈现给用户。</li>\n</ul>\n<p>按照渲染的设备划分可有三种方式：客户端渲染、服务端渲染、客户端与服务端混合渲染。</p>\n<h2 id=\"客户端渲染\" style=\"position:relative;\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93\" aria-label=\"客户端渲染 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端渲染</h2>\n<p>顾名思义，用户端渲染，有电脑、手机、平板等。应用类型主要是：原生应用与 Web 应用。当然，因为两类应用都支持图片，所以可以使用图片形式来展现公式。</p>\n<p>无论是桌面端还是移动端原生应用，因为无相关经验，不太了解，客户端渲染公式方式。Github 上面可以搜到一些渲染公式的包，但是对于可靠性不太了解。</p>\n<p>Web 应用主要使用 <a href=\"https://www.mathjax.org/\">MathJax</a> 与 <a href=\"https://katex.org/\">KaTeX</a> 两个包。</p>\n<p><strong>MathJax</strong></p>\n<ul>\n<li>高质量：精确到像素的排版</li>\n<li>支持 LaTeX，MathML 等语言</li>\n<li>可扩展</li>\n<li>可靠性：无论是从开发者背景，还是使用者背景，都是经过多年检验的</li>\n<li>可访问性</li>\n<li>渲染速度慢：尤其遇到复杂的公式时</li>\n</ul>\n<p><strong>KaTeX</strong></p>\n<ul>\n<li>渲染速度极快：大约 10 倍于 MathJax</li>\n<li>可靠性：可汗学院开发与使用</li>\n<li>渲染质量：满足大部分需求</li>\n</ul>\n<p>可以查看 <a href=\"http://www.intmath.com/cg5/katex-mathjax-comparison.php\">compare the output of KaTeX with MathJax</a> 两者的渲染速度与渲染效果。</p>\n<p><strong>另外，在实际的使用当中，结合使用两者效果更好，优先使用 KaTeX 来渲染，如果渲染失败就是用 MathJax 来渲染。</strong></p>\n<h2 id=\"服务端渲染\" style=\"position:relative;\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93\" aria-label=\"服务端渲染 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端渲染</h2>\n<p>即使结合使用了 KaTeX 和 MathJax，有些时候仍然不能满足要求，用户不希望等三秒以上才能渲染好公式。通常，公式的数量也是有限度的，按照一亿用户，每人贡献 100 个公式，那就是大约 100 亿条公式，可能还有一些重复的。没有必要用户每次查看时都重复渲染一遍，也没有必要在用户的设备上面各自渲染。</p>\n<p>缩减计算时间的第一条规则就是<strong>空间换时间</strong>，也称之为<strong>缓存</strong>。</p>\n<p>公式通常使用 TeX 标记语言来书写，输出结果通常有：HTML、MathML、图片，其中图片又分栅格图片（png、jpg、webp）和矢量图片（svg）。输出结果自然是计算的结果，然后可以使用分布式缓存（如CDN）来分发这些输出结果。</p>\n<h3 id=\"接口设计\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\" aria-label=\"接口设计 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接口设计</h3>\n<h4 id=\"创建公式对象\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA%E5%85%AC%E5%BC%8F%E5%AF%B9%E8%B1%A1\" aria-label=\"创建公式对象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建公式对象</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">POST /equations</code></pre></div>\n<ul>\n<li>\n<p>请求参数：</p>\n<ul>\n<li>input：可选，输入格式，比如 tex，mathml, asciimath，默认 tex。</li>\n<li>output：可选，输出格式，可选值：svg, png, mathml, html 等，可以多个组合，默认 svg。</li>\n</ul>\n</li>\n<li>\n<p>请求内容：</p>\n<ul>\n<li>公式标记语言。</li>\n</ul>\n</li>\n<li>返回值：公式对象 ID。</li>\n</ul>\n<p>接受公式标记语言，比如 TeX、MathML、AsciiMath 等，分配一个唯一标识 ID，然后渲染公式为指定的一个活多个输出格式，公式输入与渲染结果都存储起来，可能还包括自动分发 CDN。</p>\n<h4 id=\"获取公式对象\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E5%85%AC%E5%BC%8F%E5%AF%B9%E8%B1%A1\" aria-label=\"获取公式对象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取公式对象</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET /equations/:equationId</code></pre></div>\n<ul>\n<li>\n<p>请求参数：</p>\n<ul>\n<li>output：输出格式。</li>\n</ul>\n</li>\n<li>返回值：公式渲染结果</li>\n</ul>\n<h3 id=\"渲染服务\" style=\"position:relative;\"><a href=\"#%E6%B8%B2%E6%9F%93%E6%9C%8D%E5%8A%A1\" aria-label=\"渲染服务 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染服务</h3>\n<p>可以使用 Node 来运行 MathJax 或者 KaTeX，并结合 Puppeteer 来转成图片，当然这种方式性能不高，不过基本需求可以满足。如果对于渲染服务性能要求很高，可以考虑自己写 TeX 渲染组件或者考虑其他语言的 TeX 渲染组件，这方面不太了解，只知道维基百科就是自己写的 TeX 渲染组件。</p>\n<h3 id=\"性能\" style=\"position:relative;\"><a href=\"#%E6%80%A7%E8%83%BD\" aria-label=\"性能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>性能</h3>\n<ul>\n<li>使用 CDN，可以多域名来突破浏览器同时请求数最大上限。</li>\n<li>图片延迟加载：即公式图片将要进入可视区域再加载。</li>\n</ul>\n<h3 id=\"栅格图片与矢量图片\" style=\"position:relative;\"><a href=\"#%E6%A0%85%E6%A0%BC%E5%9B%BE%E7%89%87%E4%B8%8E%E7%9F%A2%E9%87%8F%E5%9B%BE%E7%89%87\" aria-label=\"栅格图片与矢量图片 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>栅格图片与矢量图片</h3>\n<p>因为屏幕的像素密度有高有低，而栅格图片放大与缩小通常采用插值算法，这样会造成模糊，可以针对不同像素密度生成不同的图片来解决。如果使用矢量图片（比如 SVG）就可以无限缩放。</p>\n<h2 id=\"混合渲染\" style=\"position:relative;\"><a href=\"#%E6%B7%B7%E5%90%88%E6%B8%B2%E6%9F%93\" aria-label=\"混合渲染 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>混合渲染</h2>\n<p>即时我们采用了服务端渲染，并且做了一些性能优化，如果一个页面有很多公式，可能几十上百个，有简单的，也有复杂的。如果每个简单的公式都发送一个单独的请求，对于网络环境较差的客户端可能会加载慢，降低用户体验。</p>\n<p>可以将简单的公式与复杂的公式区分开：简单的公式使用客户端渲染，复杂的公式使用服务端渲染。简单与复杂划分的界限可能是由<code class=\"language-text\">公式标记语言字节数传输时间</code>加上<code class=\"language-text\">公式客户端渲染时间</code>与<code class=\"language-text\">公式单独一个请求传输时间</code>比较来决定。</p>\n<h2 id=\"可搜索性\" style=\"position:relative;\"><a href=\"#%E5%8F%AF%E6%90%9C%E7%B4%A2%E6%80%A7\" aria-label=\"可搜索性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>可搜索性</h2>\n<p>常见的搜索功能都是输入一些关键词，根据关键词匹配，也有搜索引擎支持图片搜索。简单的文本输入很难满足公式，而如果让用户使用 TeX 之类标记语言输入公式又才繁琐，可以通过手写公式，然后以图片形式传给搜索服务，可能会经过手写识别、公式识别等一系列解析，然后解析成某种格式，比如 TeX，然后使用 TeX 标记语言来匹配，至于匹配算法也会与常见的字符串匹配不同吧。</p>\n<p>公式渲染不仅仅输出图片，也要输出其他标记语言，比如 MathML，然后便于搜索爬虫抓取，然后用于识别匹配。</p>\n<p>目前一些国内拍题搜答案的移动应用比较类似，上传题目图片搜结果，这方面特别依赖人工智能相关技术，</p>","timeToRead":6,"excerpt":"…","frontmatter":{"title":"公式渲染方案","cover":"","date":"2018-12-31","category":"Web","tags":["公式","TeX"]},"fields":{"slug":"/rendering-tex/","date":"2018-12-30T16:00:00.000Z"}}},"pageContext":{"slug":"/rendering-tex/"}},"staticQueryHashes":[]}