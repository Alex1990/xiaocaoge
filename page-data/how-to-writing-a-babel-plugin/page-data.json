{"componentChunkName":"component---src-templates-post-jsx","path":"/how-to-writing-a-babel-plugin/","result":{"data":{"markdownRemark":{"html":"<p>Babel 是一个 JavaScript 语言的源码到源码（source to source）编译器，也可以进行源码静态分析，比如分析源码的依赖树。</p>\n<blockquote>\n<p>本文只是记录一下自己学习写一个简单的 Babel Plugin <a href=\"https://www.npmjs.com/package/babel-plugin-log\">babel-plugin-log</a> 总结，更详细更好的入门教程可以看 <a href=\"https://github.com/jamiebuilds/babel-handbook\">babel-handbook</a>。</p>\n</blockquote>\n<h2 id=\"一个使用-consolelog-的小问题\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8-consolelog-%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98\" aria-label=\"一个使用 consolelog 的小问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一个使用 console.log 的小问题</h2>\n<p>在调试 JavaScript 时，经常需要使用<code class=\"language-text\">console.log</code>打印应用执行到某行代码时，某些变量或表达式的值，也经常会在多个地方打印。这样会导致浏览器或者终端一次性输出很多，有时候难以区分到底是哪里打印出来的，浏览器调试工具会给出代码文件及行列信息，但是我们不会去记写<code class=\"language-text\">console.log</code>的行列信息。所以经常会使用下面这种写法来标识：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>当然，使用断点调试工具也可以非常方便观察某些变量或表达式运行过程中的值，但是有点儿大材小用，稍显麻烦，所以很多人还是习惯使用<code class=\"language-text\">console.log</code>。</p>\n<p>所以如果能有一个工具自动将<code class=\"language-text\">console.log(a)</code>转换成<code class=\"language-text\">console.log(&quot;a&quot;, a)</code>就好了，很容想到写一个 Babel 插件来解决这个问题。</p>\n<h2 id=\"babel-插件快速上手\" style=\"position:relative;\"><a href=\"#babel-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B\" aria-label=\"babel 插件快速上手 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 插件快速上手</h2>\n<p>一些简单的代码转换插件是比较简单的，写 Babel 插件也是非常好上手的，并不需要惧怕。</p>\n<h3 id=\"抽象语法树（ast）\" style=\"position:relative;\"><a href=\"#%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%EF%BC%88ast%EF%BC%89\" aria-label=\"抽象语法树（ast） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>抽象语法树（AST）</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">抽象语法树</a>（Abstract syntax tree，简写 AST）是用来描述源码抽象语法结构的树。</p>\n<p><code class=\"language-text\">@babel/parser</code>包，之前称为 babylon，用来完成将源码解析为 AST 的过程，遵循 <a href=\"https://github.com/babel/babel/blob/master/packages/babel-parser/ast/spec.md\">Babel AST Spec</a>。可以使用在线工具 <a href=\"https://astexplorer.net/\">ASTExplorer</a> 感受一下抽象语法树，这个工具在写插件时会经常用到。</p>\n<h3 id=\"babel-编译过程\" style=\"position:relative;\"><a href=\"#babel-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B\" aria-label=\"babel 编译过程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel 编译过程</h3>\n<p>Babel 编译的过程大致：</p>\n<ul>\n<li><strong>解析（Parse）</strong>：解析源码为一个抽象语法树，涉及到<a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\">静态分析（Lexical Analysis）</a>和<a href=\"https://en.wikipedia.org/wiki/Parsing\">语法分析（Syntactic Analysis）</a>;</li>\n<li><strong>转换（Transform）</strong>：对抽象语法树进行各种操作；</li>\n<li><strong>生成（Generate</strong>：将转换后的抽象语法树生成代码；</li>\n</ul>\n<p>Babel 插件只是在转换过程当中运行。</p>\n<h3 id=\"遍历\" style=\"position:relative;\"><a href=\"#%E9%81%8D%E5%8E%86\" aria-label=\"遍历 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遍历</h3>\n<p>要对抽象语法树进行各种操作就涉及到抽象语法树的遍历，访问某一个节点，对节点进行各种操作。</p>\n<h4 id=\"visitor\" style=\"position:relative;\"><a href=\"#visitor\" aria-label=\"visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visitor</h4>\n<p><a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor pattern</a> 是抽象语法树的遍历模式。</p>\n<p>比如下面定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Identifier</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'called'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>只会对<code class=\"language-text\">Identifier</code>类型的节点起作用。</p>\n<h4 id=\"paths\" style=\"position:relative;\"><a href=\"#paths\" aria-label=\"paths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paths</h4>\n<p>路径是一个对象用来定位树当中的节点，Visitor 方法的第一个参数就是一个 Path：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Identifier</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">path</code>对象包含节点信息、各种节点的操作方法等。</p>\n<h3 id=\"babeltypes\" style=\"position:relative;\"><a href=\"#babeltypes\" aria-label=\"babeltypes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@babel/types</h3>\n<p><a href=\"https://babeljs.io/docs/en/next/babel-types\">@babel/types</a> 包包含各种类型节点的判断与构建方法。</p>\n<h3 id=\"babel-plugin-log\" style=\"position:relative;\"><a href=\"#babel-plugin-log\" aria-label=\"babel plugin log permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel-plugin-log</h3>\n<p>这里仅仅完成将<code class=\"language-text\">console.log(a)</code>转换为<code class=\"language-text\">console.log(&quot;a&quot;, a)</code>的操作，完整源码可以查看代码仓库 <a href=\"https://github.com/Alex1990/babel-plugin-log\">babel-plugin-log</a>。</p>\n<p>在写 babel 插件时出来阅读 babel-handbook 教程之外，参考其他 babel 插件的源码是一个很好的方法，比如我就参考了 <a href=\"https://github.com/lodash/babel-plugin-lodash\">babel-plugin-lodash</a>，尤其是测试的方法。</p>\n<h4 id=\"源码\" style=\"position:relative;\"><a href=\"#%E6%BA%90%E7%A0%81\" aria-label=\"源码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码</h4>\n<p><strong>src/index.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// console.log(a) 是一个 CallExpression 节点，但是 CallExpression 不仅仅包含 console.log(a)</span>\n<span class=\"token comment\">// 所以这里需要一个方法来判断节点是否是 console.log(a) 调用，使用在线工具 astexplorer.net 可以</span>\n<span class=\"token comment\">// 观察分析出使用下面代码来判断</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isConsoleLogCall</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> callee <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">,</span>\n    object<span class=\"token punctuation\">,</span>\n    property\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> callee\n  <span class=\"token keyword\">return</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'MemberExpression'</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'Identifier'</span> <span class=\"token operator\">&amp;&amp;</span> object<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'console'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'Identifier'</span> <span class=\"token operator\">&amp;&amp;</span> property<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. types 是 @babel/types</span>\n<span class=\"token comment\">// 2. 返回值是一个 visitor 对象</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">CallExpression</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 我们要进行的转换就是为每个调用参数前插入参数名字符串</span>\n      <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>arguments\n      <span class=\"token keyword\">const</span> newArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        newArgs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">stringLiteral</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>arguments <span class=\"token operator\">=</span> newArgs\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"测试\" style=\"position:relative;\"><a href=\"#%E6%B5%8B%E8%AF%95\" aria-label=\"测试 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>测试</h4>\n<p>测试主要就是测试生成的代码与期望的代码是否匹配，这里参考了 <a href=\"https://github.com/lodash/babel-plugin-lodash\">babel-plugin-lodash</a> 的测试写法，使用 Jest 框架。</p>\n<p>文件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">test/\n  fixtures/\n    one-identifier\n      actual.js\n      expected.js\n    multiple-identifiers\n      actaul.js\n      expected.js\n  index.spec.js</code></pre></div>\n<p>主要就是比对<code class=\"language-text\">actual.js</code>转换后的代码与<code class=\"language-text\">expected.js</code>文件内容是否相同，需要注意两点：</p>\n<ol>\n<li>babel 生成的代码包含句尾分号<code class=\"language-text\">;</code></li>\n<li>比对之前去除代码前后空白符</li>\n</ol>\n<p><strong>index.spec.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* global describe, test, expect */</span>\n<span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> transformFileSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/core'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> plugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../src'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getTestName</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">testPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>testPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-plugin-log'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> testPaths <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'fixtures/*/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> testPath <span class=\"token keyword\">of</span> testPaths<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> testName <span class=\"token operator\">=</span> <span class=\"token function\">getTestName</span><span class=\"token punctuation\">(</span>testPath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> actualPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>testPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'actual.js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> expectedPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>testPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'expected.js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">should work with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>testName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> expected <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>expectedPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> actual <span class=\"token operator\">=</span> <span class=\"token function\">transformFileSync</span><span class=\"token punctuation\">(</span>actualPath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>plugin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>code\n\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h3>\n<p>上面只是包含最入门的东西，实际写插件之前还需要了解 babel-handbook 当中 Scope、State 等概念和最佳实践，另外可以参考其他 babel 插件的源码。</p>","timeToRead":5,"excerpt":"Babel 是一个 JavaScript 语言的源码到源码（source to source）编译器，也可以进行源码静态分析，比如分析源码的依赖树。 本文只是记录一下自己学习写一个简单的 Babel Plugin babel-plugin-log…","frontmatter":{"title":"如何写一个 Babel 插件","cover":"","date":"2019-11-02","category":"JavaScript","tags":["Babel","Babel Plugin","Babel 插件"]},"fields":{"slug":"/how-to-writing-a-babel-plugin/","date":"2019-11-01T16:00:00.000Z"}}},"pageContext":{"slug":"/how-to-writing-a-babel-plugin/"}},"staticQueryHashes":[]}