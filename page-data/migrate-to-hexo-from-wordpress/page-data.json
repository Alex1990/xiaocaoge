{"componentChunkName":"component---src-templates-post-jsx","path":"/migrate-to-hexo-from-wordpress/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"为什么迁移？\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%81%E7%A7%BB%EF%BC%9F\" aria-label=\"为什么迁移？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么迁移？</h2>\n<p>实际上，迁移博客的决定大半年前，大概 2014 年 7 月份就已经决定了。当时考虑到托管在 Github 上面的静态博客有这么几种优势：</p>\n<ul>\n<li>采用 Markdown 方式书写，可采用任何自己喜欢的编辑器，含有代码块，书写方便，甚至以后写数学公式也可以采用 TeX 语法。当然，WordPress 也可以，不过总觉得安装插件不太直接。</li>\n<li>Github Pages 免费，可以节省每年 200 大洋的虚拟主机费用，且托管在 Github 很放心。</li>\n<li>静态页面速度快，不过这个现在体现不出来了，国内访问 Github Pages 网速慢。</li>\n<li>不得不说我受到了流行趋势的影响，看到很多人采用了这种方式，我就想尝试下。</li>\n</ul>\n<p>大致就是以上几点原因使我最终决定迁移博客到 Github Pages。</p>\n<h2 id=\"选择静态博客系统\" style=\"position:relative;\"><a href=\"#%E9%80%89%E6%8B%A9%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F\" aria-label=\"选择静态博客系统 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>选择静态博客系统</h2>\n<p>一开始，我先听说的 Jekyll，在尝试时，发现要安装自己不熟悉的工具，因为它是 Ruby 写成的，而且我当时用的 Windows 系统，最终闲它麻烦而放弃。然后就搜索了一些其他的静态博客，发现各种语言写的都有，最后发现了 <a href=\"http://hexo.io\">Hexo</a> 这个用 NodeJS 写的，而且是一个台湾人写的，发现已有不少人在用。当时自己也有学习一些 NodeJS 的知识，想着用了 Hexo 也可以顺便学习下别人怎么写的，于是就这样决定选择 Hexo 了。</p>\n<h2 id=\"有点后悔选择-hexo-了\" style=\"position:relative;\"><a href=\"#%E6%9C%89%E7%82%B9%E5%90%8E%E6%82%94%E9%80%89%E6%8B%A9-hexo-%E4%BA%86\" aria-label=\"有点后悔选择 hexo 了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有点后悔选择 Hexo 了</h2>\n<p>我感觉 Hexo 有几点不足，<strong>纯属个人拙见</strong>。</p>\n<h3 id=\"主题质量低\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E9%A2%98%E8%B4%A8%E9%87%8F%E4%BD%8E\" aria-label=\"主题质量低 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主题质量低</h3>\n<p>我查看了所有的主题，发现大部分简直就是半成品，质量太低了，只有几个还可以。似乎缺乏用心的，且有设计能力的人来写 Hexo 主题。刚开始时，主题都只给主题源码的 Github 链接，没有截图，所以选择成本很高，有些链接失效了也没人管理。当然，Hexo 几乎只有一个人在管理所有的事情，所以很难忙得过来的，得多人协作。</p>\n<h3 id=\"早期代码组织乱\" style=\"position:relative;\"><a href=\"#%E6%97%A9%E6%9C%9F%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87%E4%B9%B1\" aria-label=\"早期代码组织乱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>早期代码组织乱</h3>\n<p>我只读了一些 2.8.* 时代的代码，感觉读懂代码好吃力，打断点调试都得同时打开很多个文件。读了一两个星期，才弄懂了一点点，当然这和我水平低也有很大关系。不过还是学到好多小的知识的，到 3.* 时代发现代码进行了大的重构，已经放弃阅读了。</p>\n<h3 id=\"其他-n-多小问题\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96-n-%E5%A4%9A%E5%B0%8F%E9%97%AE%E9%A2%98\" aria-label=\"其他 n 多小问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他 N 多小问题</h3>\n<p><strong>只针对 2.8.3 版本，3.0.0 以后不太了解</strong></p>\n<ul>\n<li>不支持一篇文章多个分类目录，我在 WordPress 用到了一篇文章多个分类目录，结果 Hexo 不支持，我不得不把所有文章都变成一个分类目录。有人解释说可以使用标签，但是我认为分类属于相对固定的，而标签术语文章的几个核心关键词。另外，前端一些文章经常同时涉及到 CSS 和 JavaScript，这就决定一篇文章属于两个分类目录是很合理的，总不能都概括为前端吧。</li>\n<li>Markdown 代码块必须使用四个空格缩进语法，用 '`<code class=\"language-text\"></code>' 就不行，这还得自己写脚本转换已有的文章。</li>\n<li>使用 highlightjs 的 theme 时，需要修改 CSS，去掉 'hljs-'，不知道为什么 Hexo 默认这样选择，且没法配置。</li>\n<li>分类目录<code class=\"language-text\">list_categories()</code>没法控制汉字排序，而且没法像 WordPress 方便获取一个目录列表，然后自己定制排序。</li>\n<li>README.md 文件的渲染和删除，现在好像可以配置路径来过滤了。</li>\n<li>文章更新日期当成创建日期，结果首页文章顺序发生了变化，需要自己手动日期。</li>\n</ul>\n<h2 id=\"写一个-hexo-主题\" style=\"position:relative;\"><a href=\"#%E5%86%99%E4%B8%80%E4%B8%AA-hexo-%E4%B8%BB%E9%A2%98\" aria-label=\"写一个 hexo 主题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写一个 Hexo 主题</h2>\n<p>一开始规划时，什么 Off-Canvas、响应式、社交网站链接、自定义字体、动画效果、兼容到IE8等都整上去，后来实际做时，发现每个都要花不少时间。而且很长时间没有写过什么 CSS，导致水平下降，写起来不熟练啊。</p>\n<p>做有关设计方面的决定时，内心很纠结，比如超链接四种状态下的颜色选择、标题或内容的颜色、侧边栏的布局等，每次写主题时感觉这些好难做决定。主题的大致颜色是参考的原来的主题配色，网站整体布局参考了其他人的，而且这种布局不少见。每写一个主题，都被自己渣一样的设计能力虐心，也越来越倾向于不要这些布局了，就文章列表就行了。</p>\n<p>另外，花时间的还有要了解 Hexo 写主题的一些 Helpers，主题的代码结构等，幸好是参考官网的一款主题，自己从头开始写更麻烦了。</p>\n<p>虽然每次写博客主题时，感觉特别虐心，不过当渐渐完成之时，都会感觉比上一个主题有进步。另外，写博客主题必然要写文章的 CSS 样式，文章在很多网站都会呈现，写好这个很关键，要注意很多细节或者说临界情况。</p>\n<h2 id=\"将-wordpress-的内容迁移到-hexo\" style=\"position:relative;\"><a href=\"#%E5%B0%86-wordpress-%E7%9A%84%E5%86%85%E5%AE%B9%E8%BF%81%E7%A7%BB%E5%88%B0-hexo\" aria-label=\"将 wordpress 的内容迁移到 hexo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>将 WordPress 的内容迁移到 Hexo</h2>\n<p>首先可以按照官网文档来操作，不过之后还有一些工作要做：</p>\n<ul>\n<li>所有的超链接确保正确，包括图片、DEMO 等的链接；</li>\n<li>代码块高亮，以前用的 WordPress 一个插件，然后自己用 Node 写个脚本替换下或者使用 Sublime 自带的正则替换功能；</li>\n<li>修复在转 Markdown 时的错误，确实有一些要自己调整，主要是加粗、列表；</li>\n<li>有发现了不少文章中的错别字，顺便修正了；</li>\n<li>DEMO文件、图片文件、附件等目录要放到所采用主题的<code class=\"language-text\">source</code>目录下；</li>\n</ul>\n<h2 id=\"部署到-github-及配置自定义域名\" style=\"position:relative;\"><a href=\"#%E9%83%A8%E7%BD%B2%E5%88%B0-github-%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D\" aria-label=\"部署到 github 及配置自定义域名 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>部署到 Github 及配置自定义域名</h2>\n<p>Github Pages 分两种：User or organization site 和 Project site。我见到的很多人的博客都是前一种，而且前一种设置及配置自定义域名比较简便，跟着官方的文档和帮助说明就可以了。但是，有一个问题，所有其他项目的 Github Pages 页面的域名也会都跳转到你博客的域名下面，成为一个目录，如：</p>\n<p><code class=\"language-text\">http://username.github.io/someproject</code></p>\n<p>跳转到</p>\n<p><code class=\"language-text\">http://www.yourblogdomain.com/someproject</code></p>\n<p>这不是我想要的结果，我不希望博客域名影响到 Github 上面的项目链接。所以，我只好采用后一种：Project site，这种设置起来也难一点儿，主要是配置自定义域名。</p>\n<p>设置步骤（我是采用 DNSPod 来解析域名）：</p>\n<ol>\n<li>为自己的博客创建一个 Repository，并创建<code class=\"language-text\">gh-pages</code>分支；</li>\n<li>在 DNS 服务商处配置自己的 DNS，需要添加一条 A 记录和一条 CNAME 记录：</li>\n</ol>\n<p>  添加 A 记录，查找你 Github 子域名地址的静态 IP 地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ nslookup alex1990.github.io\n    Server:\t\t211.162.96.1\n    Address:\t211.162.96.1#53\n\n    Non-authoritative answer:\n    alex1990.github.io\tcanonical name = github.map.fastly.net.\n    Name:\tgithub.map.fastly.net\n    Address: 103.245.222.133</code></pre></div>\n<p>  A 记录主机记录字段选择<code class=\"language-text\">@</code>，记录值（填写IP地址的地方）填写使用<code class=\"language-text\">nslookup</code>查找到的地址，此处为：<code class=\"language-text\">103.245.222.133</code>。</p>\n<p>  添加 CNAME 记录，是为了能解析<code class=\"language-text\">www</code>域名。主机记录字段选择<code class=\"language-text\">www</code>，记录值填写自己的 Github 域名，此处为<code class=\"language-text\">alex1990.github.io</code>。</p>\n<ol start=\"3\">\n<li>在 Repository 根目录下创建一个文件<code class=\"language-text\">CNAME</code>，其内容<code class=\"language-text\">www.xiaocaoge.com</code>，带<code class=\"language-text\">www</code>时，Github 会将<code class=\"language-text\">xiaocaoge.com</code> 跳到 <code class=\"language-text\">www.xiaocaoge.com</code>，可根据自己需要选择带或不带，将创建的文件 Push 到 Github 上面，等待几分钟以便 Github 刷新域名的跳转。</li>\n</ol>\n<p>另外要注意的是，如果先前建立过 User Pages，则所有的 Project Pages 域名仍然跳转，此时需要更新所有项目的<code class=\"language-text\">gh-pages</code>分支，即提交来刷新缓存。如果还不行，可尝试下面措施：</p>\n<ul>\n<li>清理浏览器缓存</li>\n<li><code class=\"language-text\">chrome://net-internals#dns</code> 点击<code class=\"language-text\">clear host cache</code></li>\n</ul>\n<p>在实际的配置过程中，我花了两个晚上，看了十几个网页的教程，试了 N 多次，看了一篇文章 <a href=\"https://larry-price.com/blog/2014/02/12/custom-domain-with-github-pages\">Custom Domain With Github Pages</a> 才尝试成功。</p>","timeToRead":7,"excerpt":"为什么迁移？ 实际上，迁移博客的决定大半年前，大概 2014 年 7 月份就已经决定了。当时考虑到托管在 Github 上面的静态博客有这么几种优势： 采用 Markdown 方式书写，可采用任何自己喜欢的编辑器，含有代码块，书写方便，甚至以后写数学公式也可以采用 TeX…","frontmatter":{"title":"从WordPress迁移博客到Hexo","cover":"","date":"2015-05-23","category":"个人博客","tags":["WordPress","Hexo","Blog","Github"]},"fields":{"slug":"/migrate-to-hexo-from-wordpress/","date":"2015-05-22T16:00:00.000Z"}}},"pageContext":{"slug":"/migrate-to-hexo-from-wordpress/"}},"staticQueryHashes":[]}