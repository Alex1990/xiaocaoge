{"componentChunkName":"component---src-templates-category-jsx","path":"/categories/前端/","result":{"data":{"allMarkdownRemark":{"totalCount":32,"edges":[{"node":{"fields":{"slug":"/monitoring-browser-exception-with-sentry/","date":"2020-04-23T16:00:00.000Z"},"excerpt":"一个典型的功能迭代周期，开发尽量按时交付功能，测试尽量测出多的 bug，然后开发修完发现的 bug…","timeToRead":12,"frontmatter":{"title":"使用 Sentry 监控浏览器异常","tags":["异常","错误","监控","Sentry"],"cover":"","date":"2020-04-24T00:00:00.000Z"}}},{"node":{"fields":{"slug":"/react-event-system-resolving/","date":"2019-02-11T16:00:00.000Z"},"excerpt":"准备工作 如何阅读源码 如果之前没有读过类似框架（代码规模、技术栈等方面相似）的源码，第一次阅读难免不知所措，毕竟代码量不小，几个小时或一天只能了解大概有哪些东西。我第一次尝试阅读 React…","timeToRead":18,"frontmatter":{"title":"React 事件系统解析","tags":["React","事件系统"],"cover":"","date":"2019-02-12"}}},{"node":{"fields":{"slug":"/mobile-web-debugging/","date":"2019-02-03T16:00:00.000Z"},"excerpt":"这里移动端 Web 既包括在浏览器里面运行的网页，也包括使用 WebView 访问的网页。另外，远程调试既包括调试真机上面的网页，也包括使用 iOS/Android 模拟器里面运行的网页。 调试 iOS Safari 和 iOS WebViews 通常使用 macOS…","timeToRead":8,"frontmatter":{"title":"移动端 Web 开发远程调试指南","tags":["调试","移动端","远程调试"],"cover":"","date":"2019-02-04"}}},{"node":{"fields":{"slug":"/browser-request-performance-collect/","date":"2017-04-30T16:00:00.000Z"},"excerpt":"性能似乎是编程当中一个永恒的话题，前端也不例外，而前端考虑性能的重要目的是提升用户体验。前端性能可以粗略地分为两部分：传输性能与运行性能。传输性能主要就是加载资源的请求耗时，运行性能主要就是应用运行时 CPU 耗时、内存及 GPU…","timeToRead":9,"frontmatter":{"title":"浏览器请求性能数据","tags":["性能","请求性能"],"cover":"","date":"2017-05-01"}}},{"node":{"fields":{"slug":"/lodash-shrinking/","date":"2017-03-10T16:00:00.000Z"},"excerpt":"前言 大约一两年前，浏览器端使用 Lodash 还是 Underscore，我还是认为 Underscore 有些自己的优势的：前端大都熟悉、体积小。但是随着自己做的前端应用越来越复杂，随便一个 UI 库，甚至一个复杂的组件，如表格、曲线图，其大小都比 Lodash…","timeToRead":5,"frontmatter":{"title":"更小体积的 Lodash","tags":["Lodash","Babel","Webpack"],"cover":"","date":"2017-03-11"}}},{"node":{"fields":{"slug":"/batch-operations/","date":"2017-02-07T16:00:00.000Z"},"excerpt":"…","timeToRead":6,"frontmatter":{"title":"批量功能设计","tags":["批量","批量操作","API","UI"],"cover":"","date":"2017-02-08"}}},{"node":{"fields":{"slug":"/frontend-code-style-in-action/","date":"2016-12-23T16:00:00.000Z"},"excerpt":"本文总结目前开发组一年多以来在前端代码规范方面的实战经验，包括了为什么需要代码规范，如何制定代码规范、检测工具等。这一年多来，开发组前端的大致情况是： 前端开发人员：2 人。 项目规模： 一个综合性主项目使用 jQuery + Bootstrap 开发，大约 4000…","timeToRead":6,"frontmatter":{"title":"前端代码规范实战","tags":["代码规范","代码风格"],"cover":"","date":"2016-12-24"}}},{"node":{"fields":{"slug":"/build-with-npm-scripts/","date":"2016-07-23T16:00:00.000Z"},"excerpt":"npm scripts 简介 npm scripts 是指Npm 对于文件中属性的处理，通过该属性，npm 可以执行命令。 比如有下面配置： 则，使用终端，在项目目录中执行来执行命令。不过，更常使用的是的简写形式来执行中的命令，即。 实际上，npm…","timeToRead":7,"frontmatter":{"title":"使用 npm scripts 作为构建工具","tags":["构建","npm scripts","Grunt","Gulp"],"cover":"","date":"2016-07-24"}}},{"node":{"fields":{"slug":"/html-boolean-attributes/","date":"2016-05-17T16:00:00.000Z"},"excerpt":"有时在阅读别人的 HTML 代码时，会发现在写//时经常将“选中”状态属性写成/。而我了解到/属性属于布尔属性（Boolean attributes）：即该属性出现表示真值，不出现表示假值，所以完全没必要多敲几个字符。 前几天，我突然发现我没有搞清楚 HTML…","timeToRead":4,"frontmatter":{"title":"HTML Boolean Attributes","tags":["React","代码风格","Boolean Attributes"],"cover":"","date":"2016-05-18"}}},{"node":{"fields":{"slug":"/server-sent-events/","date":"2016-05-07T16:00:00.000Z"},"excerpt":"最近在做一个需要不断更新状态的功能时，简单对比了下轮询、Comet、SSEs（Server-Sent Events）以及 WebSocket 几种方案之后，选择了实现起来简单的 SSEs…","timeToRead":6,"frontmatter":{"title":"使用 Server-Sent Events","tags":["SSE","Server Push"],"cover":"","date":"2016-05-08"}}},{"node":{"fields":{"slug":"/redefine-clearfix-float/","date":"2014-05-24T16:00:00.000Z"},"excerpt":"经典 以前最经典的清除浮动方法是利用伪元素，代码如下： 这种方法可兼容几乎所有浏览器，使用方便，不用在HTML代码中增加一个空标签，因此仍然被很多人使用。 但是，实际上针对IE6/7的方法与针对现代浏览器增加伪元素的方法本质上是不同的。针对IE6/…","timeToRead":3,"frontmatter":{"title":"重新定义清除浮动","tags":["CSS","float","清除浮动"],"cover":"","date":"2014-05-25"}}},{"node":{"fields":{"slug":"/responsive-images/","date":"2014-04-21T16:00:00.000Z"},"excerpt":"从定宽布局转向响应式布局的过程中，要想把PC…","timeToRead":3,"frontmatter":{"title":"响应式图片","tags":["Responsive","响应式","响应式图片"],"cover":"","date":"2014-04-22"}}},{"node":{"fields":{"slug":"/web-icons-css-sprites-datauri-and-font-face/","date":"2014-04-13T16:00:00.000Z"},"excerpt":"很多网站都需要用到小的图标，而且不止一个，会用很多个。最先接触到（也是最早出现的）的一种解决方案是CSS Sprites，把所有图标都合并成一张大图。后来又了解了DataURI这种把图片编码成字符的方法，接着是现在大行其道的@font-face…","timeToRead":6,"frontmatter":{"title":"图标解决方案: CSS Sprites, DataURI和@font-face","tags":["CSS Sprites","DataURI","font-face"],"cover":"","date":"2014-04-14"}}},{"node":{"fields":{"slug":"/understanding-viewport-and-device-width/","date":"2014-04-08T16:00:00.000Z"},"excerpt":"在响应式设计或移动Web开发当中经常见到的一句代码： content属性还包括initial-scale，user-scalable等，不过这里不谈，它们的意思都很容易理解。这里要谈得是：viewport代表什么？device-width又是啥？ 先来理解两个概念：device…","timeToRead":5,"frontmatter":{"title":"理解viewport与device-width","tags":["device-width","meta viewport","viewport"],"cover":"","date":"2014-04-09"}}},{"node":{"fields":{"slug":"/transition-height-from-0-to-auto/","date":"2014-04-03T16:00:00.000Z"},"excerpt":"CSS3的transition可以作用于大部分属性值为数值之类的属性，包括width、height、font-size、color、opacity等。但是将transition应用于，浏览器会识别height值为0，因此无法直接从过渡到。 一种简单的方法是，将过渡应用于max…","timeToRead":2,"frontmatter":{"title":"Transition height from 0 to auto","tags":["auto","height auto","transition"],"cover":"","date":"2014-04-04"}}},{"node":{"fields":{"slug":"/sublime-text-2-settings-and-use/","date":"2014-03-28T16:00:00.000Z"},"excerpt":"从notepad++切换到Sublime Text 2已经有两个月了，已经不习惯notepad++了。总得来说，Sublime比notepad++有很多功能方面的改进，使用体验非常好，又有丰富的插件，活跃的开发者氛围。当然，还是有个别地方不如notepad…","timeToRead":8,"frontmatter":{"title":"Sublime Text 2配置与使用","tags":["Sublime","Sublime Text 2","编辑器"],"cover":"","date":"2014-03-29"}}},{"node":{"fields":{"slug":"/cross-browser-transparency/","date":"2013-10-20T16:00:00.000Z"},"excerpt":"透明主要指图片中包含的透明像素以及背景色、前景色和边框色的半透明。 图片包含全透明像素时 对于这种不包含半透明像素的图片，可以导出为GIF格式来支持IE6。但是只适用于图片包含少量颜色时，通常Logo、icons等颜色只包含几种。对于色彩丰富的图片，只能采用PNG…","timeToRead":2,"frontmatter":{"title":"跨浏览器透明解决方案","tags":["透明图片","透明背景"],"cover":"","date":"2013-10-21"}}},{"node":{"fields":{"slug":"/vertical-align-methods/","date":"2013-06-05T16:00:00.000Z"},"excerpt":"垂直居中包括单行文本居中、单元格（td）内容居中、块级元素居中。由于单元格的display属性为table-cell，且浏览器默认vertical-align:middle，所以就是默认垂直居中，不做考虑。要注意的就是vertical-align…","timeToRead":3,"frontmatter":{"title":"垂直居中（Vertical-Align)","tags":["vertical-align","垂直居中"],"cover":"","date":"2013-06-06"}}},{"node":{"fields":{"slug":"/form-validation/","date":"2013-06-04T16:00:00.000Z"},"excerpt":"表单验证最常见的就是注册和登录表单，客户端与服务端都需要验证，客户端验证可以即时反馈，服务端用来防止恶意人员绕开客户端验证或JavaScript…","timeToRead":2,"frontmatter":{"title":"表单验证（Form Validation）","tags":["form validation"],"cover":"","date":"2013-06-05"}}},{"node":{"fields":{"slug":"/image-box/","date":"2013-06-03T16:00:00.000Z"},"excerpt":"通过在同一页面实现图片的浏览与查看，从而带来更好的用户体验，越来越与客户端的图片查看工具功能类似。将来，用户只用在网络上寻找、存储、编辑图片，不用下载到本地了。通过原生JavaScript实现的一个image box，比利用jQuery现成的插件要复杂的多。需要综合应用DOM…","timeToRead":1,"frontmatter":{"title":"Image Box","tags":["imagebox"],"cover":"","date":"2013-06-04"}}},{"node":{"fields":{"slug":"/drop-menu-and-tab-panel/","date":"2013-06-02T16:00:00.000Z"},"excerpt":"下拉菜单与Tab面板很相似，本质来说就是一种东西，相似的HTML代码结构，CSS设置，JavaScript代码。不考虑IE6，仅限hover事件的话，均可通过纯CSS实现。 下拉菜单可以有两种HTML代码结构，一种是主菜单包含子菜单，另一种是主菜单与子菜单同一层级。Tab…","timeToRead":1,"frontmatter":{"title":"下拉菜单与Tab面板","tags":["Tab面板","下拉菜单"],"cover":"","date":"2013-06-03"}}},{"node":{"fields":{"slug":"/jquery-plugin-slidesjs/","date":"2013-05-07T16:00:00.000Z"},"excerpt":"一款具有滑动切换和渐变切换效果的图片播放插件，可以定制左右按钮、播放/停止按钮等，标准的效果图如下 1872934495132729043 DEMO：slidesjs-example DEMO下载：slidesjs-example 插件下载：SlidesJS DOWNLOAD…","timeToRead":2,"frontmatter":{"title":"jQuery图片播放插件——Slidesjs","tags":["SlideJS","slideshow","图片轮播"],"cover":"","date":"2013-05-08"}}},{"node":{"fields":{"slug":"/simple-slide-show/","date":"2013-05-06T16:00:00.000Z"},"excerpt":"通过Jqurey只需要几行代码就可以实现最简单的图片循环播放，非常容易实现。 基础版 HTML: CSS: 从第一张播放到第N（N=3）张 先导入jquery.js，然后添加以下代码： 从第N（N=3）张到第一张 首先有一个判断当前显示图片是否为第N…","timeToRead":4,"frontmatter":{"title":"一个简单的图片播放（jQuery版）","tags":["slideshow","图片轮播","焦点图"],"cover":"","date":"2013-05-07"}}},{"node":{"fields":{"slug":"/get-rid-of-the-space-between-inline-block/","date":"2013-05-02T16:00:00.000Z"},"excerpt":"通常在两个相邻元素均设置display:inline-block后，两个元素之间会有空白间隙（大多数浏览器中为4px），如下面代码： HTML: CSS: 形成空白是因为浏览器把标签间的空白当成一个文本节点来渲染。消除空白的方法很多，从HTML代码、CSS、JavaScript…","timeToRead":2,"frontmatter":{"title":"去除inline-block元素间空白间隙方案","tags":["inline-block","空白"],"cover":"","date":"2013-05-03"}}},{"node":{"fields":{"slug":"/quirks-mode-and-standard-mode/","date":"2013-04-25T16:00:00.000Z"},"excerpt":"由于在写一个测试网页（中文）时，没有声明DOCTYPE，也没有用meta标签来指明使用何种字符编码方式，导致在除Chrome外的其他几大浏览器均出现乱码现象。只含有DOCTYPE而没有使用meta指明编码时，在FireFox中会出现乱码。然后经由百度和Google…","timeToRead":2,"frontmatter":{"title":"浏览器渲染模式：Quirks Mode And Standard Mode","tags":["quirks","quirks mode","strict mode"],"cover":"","date":"2013-04-26"}}},{"node":{"fields":{"slug":"/what-to-learn-from-on-having-layout/","date":"2013-04-25T16:00:00.000Z"},"excerpt":"早先从《精通CSS》一书中知道有这么一篇文章专门讲IE的一个专有属性hasLayout，hasLayout就是IE6/7中诸多bug的罪魁祸首。说是一篇文章，读完之后发现是“一本书”，知识容量有点大，有4…","timeToRead":6,"frontmatter":{"title":"从“On having layout”可以学到什么","tags":["ie6","layout","布局"],"cover":"","date":"2013-04-26"}}},{"node":{"fields":{"slug":"/id-and-class-naming-convention/","date":"2013-04-18T16:00:00.000Z"},"excerpt":"一直很头痛ID与Class的命名，ID还好说，页面整体划分的几个区域用用，但Class的命名，各家有各家的规范，这与网站页面的结构有些关系。不过Class命名还是有好多词语或其缩写是相似的，可以参考同类型的网站。另外ID与Class…","timeToRead":2,"frontmatter":{"title":"ID与Class命名规范","tags":["Class","CSS","ID","命名","命名规范"],"cover":"","date":"2013-04-19"}}},{"node":{"fields":{"slug":"/image-replacement-list/","date":"2013-03-18T16:00:00.000Z"},"excerpt":"图像替换技术是一个很基础的CSS技术，主要应用在网站logo的替换上或图片导航。实现方法有很多，从最古老的Farhrner方法，到应用最广的Phark方法，以及JavaScript…","timeToRead":4,"frontmatter":{"title":"图像替换技术","tags":["CSS","Image Replacement","图像替换"],"cover":"","date":"2013-03-19"}}},{"node":{"fields":{"slug":"/hnav-dropdown-ie6-js-htc/","date":"2013-02-10T16:00:00.000Z"},"excerpt":"水平导航条 关键技术即是列表项(li)的浮动，即添加以下代码： 举一个例子，下面是html代码 第一步，预格式化，消除列表项，列表外边距与内边距；（实际中通过reset.css…","timeToRead":6,"frontmatter":{"title":"水平导航条与下拉菜单（兼容ie6）","tags":["CSS","ie6","Javascript","下拉菜单","水平导航"],"cover":"","date":"2013-02-11"}}},{"node":{"fields":{"slug":"/zebra-table-nth-childn-javascript/","date":"2013-02-07T16:00:00.000Z"},"excerpt":"斑马表格就是表格的相邻两行颜色不同，这样在看有很多行的表格时，不容易看错行。\n下图即为简单的斑马表格 1082834235423952739 斑马表格的实现方法有很多种：CSS3，JavaScript，JQurey等，不过现在俺只会用CSS3或JavaScript实现。 CSS…","timeToRead":2,"frontmatter":{"title":"斑马表格（zebra table）——CSS与JavaScript实现","tags":["zebra table","斑马表格","表格"],"cover":"","date":"2013-02-08"}}},{"node":{"fields":{"slug":"/float-clear-after-content/","date":"2013-02-01T16:00:00.000Z"},"excerpt":"清除浮动的方法有很多，如：添加空div，让某一个元素（通常是footer）作清除元素，方法，利用CSS生成内容或JavaScript…","timeToRead":2,"frontmatter":{"title":"清除浮动影响——:after伪元素结合content属性方法","tags":["浮动","布局"],"cover":"","date":"2013-02-02"}}},{"node":{"fields":{"slug":"/web-predestined/","date":"2013-01-17T16:00:00.000Z"},"excerpt":"第一次听“网页设计”这个词是在刚上大学时，学校要举行网页设计大赛，然后俩同学鼓动我参加，正好也想体验一下，就参加了。 当时什么都不会，电脑基础也很差，唯一的用电脑经历就是中学时代每周一节的微机课。然后就去图书馆找到两本书，一本Dreamweaver入门，一本Fireworks…","timeToRead":2,"frontmatter":{"title":"Web前缘","tags":["Web","Web学习","网页设计"],"cover":"","date":"2013-01-18"}}}]}},"pageContext":{"category":"前端"}},"staticQueryHashes":[]}