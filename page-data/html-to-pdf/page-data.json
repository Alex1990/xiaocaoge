{"componentChunkName":"component---src-templates-post-jsx","path":"/html-to-pdf/","result":{"data":{"markdownRemark":{"html":"<p>在 Web 开发当中，HTML 转 PDF 是一个常见的需求，比如一些报告、证明等经常需要提供 PDF 格式文件，又或者一些内容需要转成 PDF 来供用户阅读。最简单的 HTML 转 PDF 的方式可能就是直接使用浏览器的打印功能来将整个页面转成 PDF。但是这种方式有很多缺点：</p>\n<ul>\n<li>操作略繁琐，增加用户使用门槛</li>\n<li>移动端或者其他嵌入应用未必有打印功能</li>\n<li>样式在不同终端可能不一致</li>\n</ul>\n<p>所以需要使用其他方式，通常有两类：服务端或客户端。</p>\n<h2 id=\"服务端\" style=\"position:relative;\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF\" aria-label=\"服务端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端</h2>\n<p><strong>优势</strong></p>\n<ul>\n<li>无需解决客户端兼容性问题。</li>\n<li>无需耗费客户端计算资源。</li>\n<li>可缓存：相同内容只需要转换一次，使用文件 hash 或者其他唯一性标识校验。不一定以文件作为最小单元，假如是幻灯片之类的应用可以每张幻灯片作为最小单元，从而实现文件级别增量转换。</li>\n<li>预渲染：可以提前转换好，用户可以即时下载。</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li>占用网络带宽。</li>\n</ul>\n<p>不同的语言有各自的解决方案（包/模块），如果是使用 Node.js 可以考虑使用 <a href=\"https://github.com/GoogleChrome/puppeteer\">puppeteer</a> 来开发。Puppeteer 是通过调用 Chrome 或者 Chromium 来实现 HTML 转 PDF，因此对于 HTML/CSS/JS 支持很好。也有基于 puppeteer 封装成的 URL 转 PDF 服务 <a href=\"https://github.com/alvarcarto/url-to-pdf-api\">url-to-pdf-api</a>。当然，puppeteer 在生成 PDF 时可能存在 bug，比如 <a href=\"https://github.com/GoogleChrome/puppeteer/issues/683\">pdf size not completely equal to the page. （l can repeat）</a>。</p>\n<p>除了使用 puppeteer，也可以使用基于 Webkit 内核的 <a href=\"https://github.com/wkhtmltopdf/wkhtmltopdf\">wkhtmtopdf</a>，这个工具提供命令行方式调用，在个人需要将一些文档等转成 PDF 时很实用。</p>\n<h2 id=\"客户端\" style=\"position:relative;\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\" aria-label=\"客户端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端</h2>\n<p><strong>优势</strong></p>\n<ul>\n<li>节省服务器计算与存储资源。</li>\n<li>节省网络带宽。</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li>耗费客户端计算资源，HTML 生成图片及图片添加到 PDF 当中都是比较耗时的任务，会阻塞 DOM，CSS 动画等渲染。</li>\n<li>基本上无法应用缓存，所以无法做到即时下载，用户需要等待。</li>\n<li>兼容性问题，通常 IE10+ 才可以，在低版本移动端操作系统也会有兼容性问题。</li>\n<li>CSS 支持问题</li>\n</ul>\n<p>客户端有一些使用 JS 来生成 PDF 的库，比如 <a href=\"https://github.com/MrRio/jsPDF\">jsPDF</a>，可以创建 PDF 的基本单元：文本、图片等。然后如果我们能将 HTML 转成一页一页的图片，然后将这些图片添加到 PDF 当中，这样就可以实现 HTML 转 PDF 了。使用 <a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a> 可以实现 HTML 转图片，而且已经有封装好的包了 <a href=\"https://github.com/eKoopmans/html2pdf\">html2pdf</a>。</p>\n<p>html2canvas 对于某些 CSS 属性并不支持，比如<code class=\"language-text\">box-shadow</code>，支持列表可以查看<a href=\"https://html2canvas.hertzen.com/features\">文档</a>。另外，因为正确渲染 HTML 与 CSS 是一件复杂的事情，而 html2canvas 几乎只有一个人在开发，会有不少 bug，比如渲染 KaTeX 生成的公式就有问题 <a href=\"https://github.com/niklasvh/html2canvas/issues/1418\">Rendering &#x3C;svg> with bug which is set with the css \"width\" style and svg \"width\" attribute</a>。</p>\n<p>html2pdf 如果一次性渲染很多页比较复杂的 HTML 时会让用户明显感受到阻塞浏览器响应用户操作，可以一次 event loop 只渲染一页内容来解决这个问题，同时还可以支持渲染页数进度功能。这些我以前的工作当中实现过：<a href=\"https://github.com/eKoopmans/html2pdf/compare/master...Alex1990:master\">Alex1990/html2canvas</a>，虽然我现在已经看不大懂自己写的代码了。</p>\n<p>另外，因为是先转成图片，然后再生成 PDF，所以 PDF 当中的文本是无法选中的。</p>\n<h2 id=\"html-转-图片\" style=\"position:relative;\"><a href=\"#html-%E8%BD%AC-%E5%9B%BE%E7%89%87\" aria-label=\"html 转 图片 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 转 图片</h2>\n<p>与 HTML 转 PDF 类似，不仅是可以分为服务端与客户端，而且采用的技术也是类似的。服务端可以使用 puppeteer，客户端可以直接使用 html2canvas。</p>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>相比于节省的服务器资源和网络带宽，生成的 PDF 质量以及用户体验更重要。对于简单少量的内容来说，使用客户端生成方案可以应对，但是对于复杂大量的内容来说使用服务端渲染方案更好。而且应该把服务端 HTML 转 PDF/图片 做成一个相对通用基础的服务，供各业务开发使用，甚至应该是云计算厂商的周边服务，供很多企业使用。</p>","timeToRead":4,"excerpt":"在 Web 开发当中，HTML 转 PDF 是一个常见的需求，比如一些报告、证明等经常需要提供 PDF 格式文件，又或者一些内容需要转成 PDF 来供用户阅读。最简单的 HTML 转 PDF 的方式可能就是直接使用浏览器的打印功能来将整个页面转成 PDF…","frontmatter":{"title":"HTML 转 PDF 方案","cover":"","date":"2019-01-14","category":"JavaScript","tags":["HTML","PDF","HTML to PDF"]},"fields":{"slug":"/html-to-pdf/","date":"2019-01-13T16:00:00.000Z"}}},"pageContext":{"slug":"/html-to-pdf/"}},"staticQueryHashes":[]}