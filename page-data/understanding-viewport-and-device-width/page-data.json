{"componentChunkName":"component---src-templates-post-jsx","path":"/understanding-viewport-and-device-width/","result":{"data":{"markdownRemark":{"html":"<p>在响应式设计或移动Web开发当中经常见到的一句代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>content属性还包括initial-scale，user-scalable等，不过这里不谈，它们的意思都很容易理解。这里要谈得是：viewport代表什么？device-width又是啥？</p>\n<h3 id=\"先来理解两个概念：device-pixels与css-pixels。\" style=\"position:relative;\"><a href=\"#%E5%85%88%E6%9D%A5%E7%90%86%E8%A7%A3%E4%B8%A4%E4%B8%AA%E6%A6%82%E5%BF%B5%EF%BC%9Adevice-pixels%E4%B8%8Ecss-pixels%E3%80%82\" aria-label=\"先来理解两个概念：device pixels与css pixels。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先来理解两个概念：device pixels与CSS pixels。</h3>\n<p>device pixels指设备的物理像素，在PC端就是你在操作系统里设置的屏幕分辨率y，其值可以通过<code class=\"language-text\">screen.width/screen.height</code>获取。在移动端下面再说。</p>\n<p>CSS pixels指在CSS文件中设置的字体大小、元素宽度等，如<code class=\"language-text\">font-size: 14px;</code> <code class=\"language-text\">width: 100px;</code> 。在PC端，浏览器缩放比例为100%，也即默认情况下，1 CSS pixel = 1 device pixel。</p>\n<p>当你放大页面到200%时，字体大小与元素宽度的像素值不会改变，是因为这些像素值是用CSS pixels表示的，实际上放大的是CSS pixels，此时 1 CSS pixel = 4 device pixels，高和宽都是200%。此时你获取<code class=\"language-text\">screen.width/screen.height</code>的值，并没有变化，而<code class=\"language-text\">window.innerWidth</code>和<code class=\"language-text\">window.innerHeight</code>的值变成了原来一半，是因为<code class=\"language-text\">window.innerWidth/window.innerHeight</code>的值也是用CSS pixels来表示的。</p>\n<p>当你进行流式布局时，会用百分比设置元素的宽度，比如一个块级元素宽度为10%，那么你也知道10%实际上是父级元素宽度的10%。但是你并没有设置父级元素的宽度啊，好吧，你也知道父级元素的宽度与其父级元素宽度一样（通过继承得来，假设这些元素都是块级元素）。然后向上到body元素的宽度，最终为html元素的宽度，其值可以通过<code class=\"language-text\">document.documentElement.clientWidth</code>获取。那这个宽度怎么来得呢？</p>\n<h3 id=\"viewport\" style=\"position:relative;\"><a href=\"#viewport\" aria-label=\"viewport permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Viewport</h3>\n<p>viewport，翻译为视口，也即可视区域的大小，PC端通过<code class=\"language-text\">window.innerWidth</code>和<code class=\"language-text\">window.innerHeight</code>获取。</p>\n<p>html元素也即文档的宽度，来自于viewport的宽度，在PC端要加上滚动条的宽度才会与viewport的宽度一样。因此，文档的宽度最终来自于viewport的宽度，PC端通过<code class=\"language-text\">window.innerWidth</code>获取。</p>\n<h2 id=\"而在移动端，情况将变得复杂。\" style=\"position:relative;\"><a href=\"#%E8%80%8C%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%EF%BC%8C%E6%83%85%E5%86%B5%E5%B0%86%E5%8F%98%E5%BE%97%E5%A4%8D%E6%9D%82%E3%80%82\" aria-label=\"而在移动端，情况将变得复杂。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>而在移动端，情况将变得复杂。</h2>\n<p>首先，上面提到文档的宽度来自于viewport的宽度，我们把这个viewport称为layout viewport，因为它和布局有关。在手机上面，因为手机的屏幕很小，当初iphone发布时，为了显示完整的桌面网页，就把给layout viewport设置了一个980px的值。手机上，可以通过<code class=\"language-text\">document.documentElement.clientWidth</code>来获取，我在安卓手机上测试也是980px。</p>\n<p>但是这样显示网页，那网页的字体、元素都很小，小到打开这样一个网页，首先要做的就是放大页面。为了提高可读性，Apple允许通meta标签来设置layout viewport的宽度，也即文章开头的那行代码。</p>\n<h3 id=\"但是，device-width又是什么呢？\" style=\"position:relative;\"><a href=\"#%E4%BD%86%E6%98%AF%EF%BC%8Cdevice-width%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F\" aria-label=\"但是，device width又是什么呢？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>但是，device-width又是什么呢？</h3>\n<p>第一代iphone的分辨率为320*480，屏幕尺寸为3.5寸。当时把layout viewport设置成与浏览器宽度一样（而手机上浏览器宽度与手机屏幕宽度一样）时，不用每次打开网页放大了，而且显示的字体与桌面上差不多，可读性很好。因此就定义了一个device-width，即是手机的屏幕分辨率，此时device翻译为“设备”还合适。</p>\n<p>但是第二代iphone发布时，屏幕的分辨率变成了480*960，而屏幕尺寸仍然为3.5寸，如果device-width仍然为手机的屏幕分辨率宽度，那么字体将会比第一代小很多。所以，维持device-width的值不变将会是个很好得选择，能与前面兼容。也因此，iphone上的device-width的值一直为320，只不过device再表示“设备”已经不合适了，实际上代表的是一个中间层。而Android也采用了这一概念，其device-width的值为360的多，360=540/1.5，360=720/2。</p>\n<h3 id=\"如何获取device-width的值呢？\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96device-width%E7%9A%84%E5%80%BC%E5%91%A2%EF%BC%9F\" aria-label=\"如何获取device width的值呢？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何获取device-width的值呢？</h3>\n<p>浏览器并没有提供一个获取device-width的属性或方法，但是通过<code class=\"language-text\">window.innerWidth</code>可以获取，需要注意的是，必须添加文章开头那行代码才可以跨浏览器获取。如果不添加那行代码，我自己在HTC G18/ Andoird OS 4.0.3中测试，自带浏览器/UC9.6/QQ5.0可以获取，而在Chrome33和Opera20中通过screen.width可以获取。iPhone与iPad我没测试。这是测试网页地址：</p>\n<p><a href=\"/demo/viewport-screen-device-width-mobile.html\">/demo/viewport-screen-device-width-mobile.html</a>。</p>\n<p>Chrome与Opera比较深入实现了中间层的概念，屏幕的实际分辨率与Web开发关系并不大，Chrome与Opera就将<code class=\"language-text\">screen.width</code>返回中间层的宽度。这里我也不明白哪种设计更好些。</p>\n<p>这里<a href=\"http://viewportsizes.com/?filter=\">有个链接</a>可以查看各种手机型号的device-width/device-height大小，虽然链接称为viewport size。</p>\n<h2 id=\"参考资源：\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90%EF%BC%9A\" aria-label=\"参考资源： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考资源：</h2>\n<ul>\n<li>A tale of two viewports - part one: <a href=\"http://www.quirksmode.org/mobile/viewports.html\">http://www.quirksmode.org/mobile/viewports.html</a></li>\n<li>A tale of two viewports - part two: <a href=\"http://www.quirksmode.org/mobile/viewports2.html\">http://www.quirksmode.org/mobile/viewports2.html</a></li>\n<li>(上面译文) 两个viewport的故事 - 第一篇：<a href=\"http://weizhifeng.net/viewports.html\">http://weizhifeng.net/viewports.html</a></li>\n<li>两个viewport的故事 - 第二篇：<a href=\"http://weizhifeng.net/viewports2.html\">http://weizhifeng.net/viewports2.html</a></li>\n<li>Using the viewport meta tag to control layout on mobile browsers: <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag\">https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport<em>meta</em>tag</a></li>\n<li>An introduction to meta viewport and viewport: <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/</a></li>\n<li>什么是viewport，为什么需要viewport：<a href=\"http://zhanchaojiang.iteye.com/blog/1470586\">http://zhanchaojiang.iteye.com/blog/1470586</a></li>\n</ul>","timeToRead":5,"excerpt":"在响应式设计或移动Web开发当中经常见到的一句代码： content属性还包括initial-scale，user-scalable等，不过这里不谈，它们的意思都很容易理解。这里要谈得是：viewport代表什么？device-width又是啥？ 先来理解两个概念：device…","frontmatter":{"title":"理解viewport与device-width","cover":"","date":"2014-04-09","category":"前端","tags":["device-width","meta viewport","viewport"]},"fields":{"slug":"/understanding-viewport-and-device-width/","date":"2014-04-08T16:00:00.000Z"}}},"pageContext":{"slug":"/understanding-viewport-and-device-width/"}},"staticQueryHashes":[]}