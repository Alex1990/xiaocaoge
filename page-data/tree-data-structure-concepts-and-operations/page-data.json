{"componentChunkName":"component---src-templates-post-jsx","path":"/tree-data-structure-concepts-and-operations/","result":{"data":{"markdownRemark":{"html":"<p>树的递归定义：一棵树是一些节点的集合。这个集合可以是空集，此时称为<strong>空树（empty tree）</strong>；若非空，则一棵树由<strong>根节点（root）</strong>以及 0 或多个非空的<strong>子树</strong>组成，每一颗子树的根都被一条从根节点出发的有向边所连接。</p>\n<h2 id=\"基本概念\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\" aria-label=\"基本概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本概念</h2>\n<ul>\n<li><strong>根（Root）</strong>：树最顶部节点。</li>\n<li><strong>父节点（Parent）</strong>：树的根节点是其子树根节点的父节点。</li>\n<li><strong>子节点（Child）</strong>：反之，子树的根节点是树的根节点的子节点。</li>\n<li><strong>叶子节点（Leaf）</strong>：没有子节点的节点。</li>\n<li><strong>兄弟/相邻节点（Siblings）</strong>：一组具有相同父节点的节点。</li>\n<li><strong>后代节点（Descendant）</strong>：节点 N 的所有子节点，所有子节点的子节点，直到叶子节点，均为节点 N 的后代节点。</li>\n<li><strong>祖先节点（Ancestor）</strong>：节点 N 的父节点，父节点的父节点，直到树的根节点，均为节点 N 的祖先节点。</li>\n<li><strong>度（Degree）</strong>：一个节点的子树的数量。</li>\n<li><strong>边（Edge）</strong>：两个节点之间的连接。</li>\n<li><strong>路径（Path）</strong>：连接一个节点和其后代节点的一组节点和边。</li>\n<li><strong>层级（Level）</strong>：一个节点的层级指从该节点到根节点所有边的数量加上 1。</li>\n<li><strong>节点的高（Height of node）</strong>：一个节点的高是节点到叶子节点的最长路径所包含的边的数量。</li>\n<li><strong>树的高（Height of tree）</strong>：根节点的高。</li>\n<li><strong>深度（Depth）</strong>：一个节点的深度是从根节点到该节点的边的数量。</li>\n</ul>\n<h2 id=\"树的遍历\" style=\"position:relative;\"><a href=\"#%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86\" aria-label=\"树的遍历 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>树的遍历</h2>\n<p>树的遍历是指通过某种方式对树当中的每个节点进行一次处理（展示、更新等）。按照访问节点的顺序可分为：<strong>深度优先（depth-first）</strong>和<strong>广度优先（breadth-first）</strong>。其中，深度优先有三种常见的方式：先序（pre-order）、中序（in-order）和后序（post-order）。</p>\n<p>因为一个节点的子节点可能有不止一个，所以某些节点需要延后访问，通过某种方式存起来。通常可以使用<strong>栈</strong>或<strong>队列</strong>存起来，如果是通过递归的方式来遍历，则存储在<strong>调用栈（call stack）</strong>当中。而调用栈的层数通常是有最大限制的，因此如果树的层级非常大，使用迭代的方式遍历更好。</p>\n<p>下面的示例代码由 C 语言书写。其中<code class=\"language-text\">Node</code>定义如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">NodeStruct</span> Node<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">NodeStruct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> childNodes<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> firstChild<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> lastChild<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> prevNode<span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> nextNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"深度优先\" style=\"position:relative;\"><a href=\"#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88\" aria-label=\"深度优先 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>深度优先</h3>\n<p>深度优先，顾名思义，在选择下一个遍历节点时，优先选择深度大的。</p>\n<h4 id=\"前序\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E5%BA%8F\" aria-label=\"前序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前序</h4>\n<p>前序遍历，指先处理当前节点，然后对子树执行遍历操作。</p>\n<p><strong>递归</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_preorder_recursive</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childNodes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traversal_dfs_preorder_recursive</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>迭代</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_preorder_iterative</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Stack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">stack_make</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> current<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stack_is_empty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> <span class=\"token function\">stack_pop_and_top</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>lastChild<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>prevNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"中序\" style=\"position:relative;\"><a href=\"#%E4%B8%AD%E5%BA%8F\" aria-label=\"中序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中序</h4>\n<p>中序遍历，在二叉树当中，指先遍历左子树，然后处理当前节点，再然后遍历右子树。不一定用于二叉树当中，对于普通的树，可以是先遍历左边部分的子树，然后处理当前节点，再然后遍历右边的子树，关键在于左右如何定义。</p>\n<p><strong>递归</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_inorder_recursive</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">traversal_dfs_inorder_recursive</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">traversal_dfs_inorder_recursive</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>迭代</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_inorder_iterative</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Stack<span class=\"token operator\">*</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">stack_make</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  bool detect_left<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    detect_left <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stack_is_empty</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>detect_left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      current <span class=\"token operator\">=</span> <span class=\"token function\">stack_pop_and_top</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    current <span class=\"token operator\">=</span> <span class=\"token function\">stack_pop_and_top</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">,</span> current<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      detect_left <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      detect_left <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"后序\" style=\"position:relative;\"><a href=\"#%E5%90%8E%E5%BA%8F\" aria-label=\"后序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后序</h4>\n<p>后序遍历，指先对子树执行遍历操作，然后再处理当前节点。</p>\n<p><strong>递归</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_postorder_recursive</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childNodes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traversal_dfs_postorder_recursive</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>迭代</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_dfs_postorder_iterative</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Stack<span class=\"token operator\">*</span> stack1 <span class=\"token operator\">=</span> <span class=\"token function\">stack_make</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Stack<span class=\"token operator\">*</span> stack2 <span class=\"token operator\">=</span> <span class=\"token function\">stack_make</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> current<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stack_is_empty</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> <span class=\"token function\">stack_pop_and_top</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>firstChild<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">stack_push</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stack_free</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">stack_is_empty</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> current <span class=\"token operator\">=</span> <span class=\"token function\">stack_pop_and_top</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">stack_free</span><span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"广度优先\" style=\"position:relative;\"><a href=\"#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88\" aria-label=\"广度优先 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>广度优先</h3>\n<p>广度优先，按照层级，一层一层遍历。</p>\n<p><strong>递归</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">bfs_recur</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">queue_is_empty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">queue_dequeue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>firstChild<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">queue_enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">bfs_recur</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">traversal_bfs_recursive</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Queue<span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> <span class=\"token function\">queue_make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">queue_enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bfs_recur</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>迭代</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">traversal_bfs_iterative</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iteratee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Queue<span class=\"token operator\">*</span> queue <span class=\"token operator\">=</span> <span class=\"token function\">queue_make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Node<span class=\"token operator\">*</span> current<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">queue_enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">queue_is_empty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    current <span class=\"token operator\">=</span> <span class=\"token function\">queue_dequeue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">iteratee</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>childNodes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">queue_enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">queue_free</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"基本操作\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\" aria-label=\"基本操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本操作</h2>\n<h3 id=\"查找节点的根节点\" style=\"position:relative;\"><a href=\"#%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9%E7%9A%84%E6%A0%B9%E8%8A%82%E7%82%B9\" aria-label=\"查找节点的根节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>查找节点的根节点</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">get_root</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-></span>parent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"获取节点的高度\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E7%9A%84%E9%AB%98%E5%BA%A6\" aria-label=\"获取节点的高度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取节点的高度</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">get_node_height_recur</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> parent_height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> parent_height<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> child <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>childNodes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> height <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> next_height <span class=\"token operator\">=</span> <span class=\"token function\">get_node_height_recur</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next_height <span class=\"token operator\">></span> height<span class=\"token punctuation\">)</span> height <span class=\"token operator\">=</span> next_height<span class=\"token punctuation\">;</span>\n      child <span class=\"token operator\">=</span> child<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_node_height</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">get_node_height_recur</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"获取节点的层级\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E8%8A%82%E7%82%B9%E7%9A%84%E5%B1%82%E7%BA%A7\" aria-label=\"获取节点的层级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取节点的层级</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">get_node_level</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    level<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> level<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"插入子节点\" style=\"position:relative;\"><a href=\"#%E6%8F%92%E5%85%A5%E5%AD%90%E8%8A%82%E7%82%B9\" aria-label=\"插入子节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>插入子节点</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">append_child</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> parent<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> lastChild <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>lastChild<span class=\"token punctuation\">;</span>\n    lastChild<span class=\"token operator\">-></span>nextNode <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    child<span class=\"token operator\">-></span>prevNode <span class=\"token operator\">=</span> lastChild<span class=\"token punctuation\">;</span>\n    parent<span class=\"token operator\">-></span>lastChild <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    cihld<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"指定节点前面插入节点\" style=\"position:relative;\"><a href=\"#%E6%8C%87%E5%AE%9A%E8%8A%82%E7%82%B9%E5%89%8D%E9%9D%A2%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9\" aria-label=\"指定节点前面插入节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指定节点前面插入节点</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_before</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node1<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> node2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Node<span class=\"token operator\">*</span> prevNode <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>prevNode<span class=\"token punctuation\">;</span>\n\n      node1<span class=\"token operator\">-></span>prevNode <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>nextNode <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>prevNode <span class=\"token operator\">=</span> prevNode<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevNode <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prevNode<span class=\"token operator\">-></span>nextNode <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token operator\">-></span>firstChild <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>childNodes <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"指定节点后面插入节点\" style=\"position:relative;\"><a href=\"#%E6%8C%87%E5%AE%9A%E8%8A%82%E7%82%B9%E5%90%8E%E9%9D%A2%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9\" aria-label=\"指定节点后面插入节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指定节点后面插入节点</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node1<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> node2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Node<span class=\"token operator\">*</span> nextNode <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>nextNode<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextNode <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextNode<span class=\"token operator\">-></span>prevNode <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token operator\">-></span>lastChild <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      node1<span class=\"token operator\">-></span>nextNode <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>prevNode <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>nextNode <span class=\"token operator\">=</span> nextNode<span class=\"token punctuation\">;</span>\n      node2<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"删除节点\" style=\"position:relative;\"><a href=\"#%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9\" aria-label=\"删除节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>删除节点</h3>\n<p>删除节点，就是删除一整个子树。</p>\n<p><strong>（待补充）</strong></p>\n<h3 id=\"克隆节点\" style=\"position:relative;\"><a href=\"#%E5%85%8B%E9%9A%86%E8%8A%82%E7%82%B9\" aria-label=\"克隆节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>克隆节点</h3>\n<p>克隆节点，可分为只是克隆指定的一个节点，还是克隆指定节点及其所有后代节点，即深度克隆。</p>\n<p><strong>（待补充）</strong></p>\n<h3 id=\"查找两个节点的最近相同祖先节点\" style=\"position:relative;\"><a href=\"#%E6%9F%A5%E6%89%BE%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E7%9B%B8%E5%90%8C%E7%A5%96%E5%85%88%E8%8A%82%E7%82%B9\" aria-label=\"查找两个节点的最近相同祖先节点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>查找两个节点的最近相同祖先节点</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">get_common_ancestor</span><span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span> node1<span class=\"token punctuation\">,</span> Node<span class=\"token operator\">*</span> node2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> node2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> level1 <span class=\"token operator\">=</span> <span class=\"token function\">get_node_level</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> level2 <span class=\"token operator\">=</span> <span class=\"token function\">get_node_level</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>level1 <span class=\"token operator\">&lt;</span> level2 <span class=\"token operator\">&amp;&amp;</span> node2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node2 <span class=\"token operator\">=</span> node2<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n      level2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>level2 <span class=\"token operator\">&lt;</span> level1 <span class=\"token operator\">&amp;&amp;</span> node1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node1 <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n      level1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node1 <span class=\"token operator\">==</span> node2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    node1 <span class=\"token operator\">=</span> node1<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    node2 <span class=\"token operator\">=</span> node2<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    level1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    level2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> node1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Tree_(data_structure)\">Tree_(data_structure)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Tree_traversal\">Tree traversal</a></li>\n<li>《数据结构与算法分析：C语言描述》</li>\n</ul>","timeToRead":9,"excerpt":"树的递归定义：一棵树是一些节点的集合。这个集合可以是空集，此时称为空树（empty tree）；若非空，则一棵树由根节点（root）以及 0 或多个非空的子树组成，每一颗子树的根都被一条从根节点出发的有向边所连接。 基本概念 根（Root）：树最顶部节点。 父节点（Parent…","frontmatter":{"title":"【树】数据结构的基本概念和操作","cover":"","date":"2018-05-14","category":"数据结构","tags":["树","树的遍历"]},"fields":{"slug":"/tree-data-structure-concepts-and-operations/","date":"2018-05-13T16:00:00.000Z"}}},"pageContext":{"slug":"/tree-data-structure-concepts-and-operations/"}},"staticQueryHashes":[]}