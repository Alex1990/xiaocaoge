{"componentChunkName":"component---src-templates-post-jsx","path":"/read-koa-source/","result":{"data":{"markdownRemark":{"html":"<p>Koa 号称为 Node.js 的下一代 Web 框架。从多年以前的 Express 一枝独秀来看，确实如此，相比 Express 的函数回调写法，使用异步函数（或生成器函数）逻辑更符合人的思维，也避免回调嵌套。另外，虽然叫“框架”，但是与其他语言大而全的框架明显不同，Koa 相当轻量，大概提供了两个核心功能：</p>\n<ul>\n<li>简化 HTTP 请求行、状态行、请求与响应头部处理</li>\n<li>中间件机制，处理与控制数据流</li>\n</ul>\n<p>其他 Web 开发常用的模块都需要通过中间件方式来实现，比如请求内容解析、路由、缓存、压缩等，当然数据库的访问也需要单独的包。</p>\n<h2 id=\"一个简单的-http-server\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-http-server\" aria-label=\"一个简单的 http server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一个简单的 HTTP Server</h2>\n<p>不使用任何框架也可以写 Web 应用，Web 框架只是集成了 Web 开发当中常用的模式、功能，提供了友好的使用方式。下面是使用 Node.js http 模块创建的一个简单的 HTTP Server。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>其中<code class=\"language-text\">req</code>是一个 <a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_class_http_incomingmessage\">http.IncomingMessage</a> 对象，包含 HTTP 请求相关信息。<code class=\"language-text\">res</code>是一个 <a href=\"https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_class_http_serverresponse\">http.ServerResponse</a> 对象，包含 HTTP 响应相关信息以及操作方法。</p>\n<p>Koa 的核心之一是简化了我们对 HTTP 请求与响应的访问与操作，比如：</p>\n<ul>\n<li>请求行信息：请求方法、请求路径（path）的解析、查询参数（querystring）解析</li>\n<li>请求状态信息获取与响应状态信息设置</li>\n<li>Cookie 解析与设置</li>\n<li>Accept-* 相关头部解析</li>\n<li>Content-Type 头部解析与设置</li>\n<li>缓存相关头部判断与设置</li>\n<li>HTTP 头部获取与设置</li>\n<li>HTTP 响应内容设置</li>\n</ul>\n<p>而上面的所有事情都是围绕 hello world 示例当中<code class=\"language-text\">req</code>和<code class=\"language-text\">res</code>两个对象。另外，Koa 当中的中间件（Middleware）也并不神奇，就是函数的层层调用，只不过每个函数都可以选择是否调用下一层函数，具体实现细节下面再讲。</p>\n<h2 id=\"koa-当中用到的一些-javascript-语法\" style=\"position:relative;\"><a href=\"#koa-%E5%BD%93%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B-javascript-%E8%AF%AD%E6%B3%95\" aria-label=\"koa 当中用到的一些 javascript 语法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Koa 当中用到的一些 JavaScript 语法</h2>\n<p>如果对下面几个语法不太熟悉，可以查看链接相关内容。</p>\n<ul>\n<li>对象 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\">getter</a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\">setter</a>。</li>\n<li>原型继承的使用方式之一 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a>。</li>\n<li>异步处理 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> 与<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">异步函数</a>。</li>\n</ul>\n<h2 id=\"核心模块\" style=\"position:relative;\"><a href=\"#%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97\" aria-label=\"核心模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>核心模块</h2>\n<ul>\n<li><a href=\"https://github.com/koajs/koa/tree/817b49830571b45a8aec6b1fc1525434f5798c58/lib/request.js\">request</a></li>\n<li><a href=\"https://github.com/koajs/koa/tree/817b49830571b45a8aec6b1fc1525434f5798c58/lib/response.js\">response</a></li>\n<li><a href=\"https://github.com/koajs/koa/tree/817b49830571b45a8aec6b1fc1525434f5798c58/lib/context.js\">context</a></li>\n<li><a href=\"https://github.com/koajs/koa/tree/817b49830571b45a8aec6b1fc1525434f5798c58/lib/application.js\">application</a></li>\n</ul>\n<h3 id=\"request\" style=\"position:relative;\"><a href=\"#request\" aria-label=\"request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>request</h3>\n<p>request 模块主要是对 HTTP 请求信息获取与设置方法封装：</p>\n<ul>\n<li>HTTP 请求行：请求方法、请求协议、请求路径、请求 URL、请求查询参数</li>\n<li>HTTP 请求头部</li>\n<li>主机名</li>\n<li>IP</li>\n<li>缓存新鲜度判断</li>\n<li><code class=\"language-text\">Accept</code>/<code class=\"language-text\">Accept-Encoding</code>/<code class=\"language-text\">Accept-Language</code>头部解析</li>\n<li><code class=\"language-text\">Content-Type</code>头部解析</li>\n</ul>\n<h3 id=\"response\" style=\"position:relative;\"><a href=\"#response\" aria-label=\"response permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>response</h3>\n<p>response 模块主要是对 HTTP 响应信息获取与设置方法封装：</p>\n<ul>\n<li>HTTP 状态码及状态信息</li>\n<li>HTTP 响应头部</li>\n<li>HTTP 响应内容</li>\n<li><code class=\"language-text\">Content-Length</code>计算</li>\n<li>重定向方法</li>\n<li><code class=\"language-text\">Content-Type</code>设置</li>\n<li><code class=\"language-text\">Content-Disposition</code>设置</li>\n<li><code class=\"language-text\">Vary</code>设置</li>\n</ul>\n<h3 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>context</h3>\n<p>Koa 的 middleware 是一个函数，其第一个参数为 context 对象，context 模块定义了一个 context 原型对象，其上面挂载 request 与 response 对象，另外通过 <a href=\"https://www.npmjs.com/package/delegates\">delegates</a> 模块将 request 与 response 对象上面的方法代理到了 context 对象上面，便于使用。</p>\n<p>除了代理 request 与 response 对象方法，也提供了一些错误处理、异常响应、Cookie 处理等方法。</p>\n<h3 id=\"application\" style=\"position:relative;\"><a href=\"#application\" aria-label=\"application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application</h3>\n<p>application 模块用于创建 koa 应用，<code class=\"language-text\">const Koa = require(&#39;koa&#39;)</code>当中的<code class=\"language-text\">Koa</code>即为<code class=\"language-text\">application</code>模块。</p>\n<h2 id=\"中间件-middleware\" style=\"position:relative;\"><a href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6-middleware\" aria-label=\"中间件 middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中间件 middleware</h2>\n<p>中间件通过 <a href=\"https://github.com/koajs/compose\">koa-compose</a> 模块实现。Koa middleware 就是一个异步函数，或者说其返回值为 Promise 对象的函数，如下形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中<code class=\"language-text\">ctx</code>为<code class=\"language-text\">context</code>对象，<code class=\"language-text\">next</code>为下一个中间件函数。</p>\n<p>HTTP 请求（context 对象）的流向如下图所示，每一个中间件当中都可以选择是否将执行控制交给下一个中间件，直到最后一个中间执行完毕之后会执行 controller（异步函数）。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">receive request\n    |\nmiddleware1\n    |\n    |--------|\n    |   middleware2\n    |        |\n    |        |---------|\n    |        |         |\n    |        |    middleware3\n    |        |         |\n    |        |---------|\n    |--------|\n    |\ncontroller\n    |\nsend response</code></pre></div>\n<h2 id=\"依赖模块\" style=\"position:relative;\"><a href=\"#%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97\" aria-label=\"依赖模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依赖模块</h2>\n<p>Koa 项目本身代码没有多少，依赖了不少三方模块，比如</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/accepts\">accepts</a>：主要对 HTTP 头部<code class=\"language-text\">Accept</code>/<code class=\"language-text\">Accept-Encoding</code>/<code class=\"language-text\">Accept-Language</code>/<code class=\"language-text\">Content-Type</code>解析处理。</li>\n<li><a href=\"https://www.npmjs.com/package/content-disposition\">content-disposition</a>：对<code class=\"language-text\">Content-Disposition</code>头部解析处理。</li>\n<li><a href=\"https://www.npmjs.com/package/content-type\">content-type</a>：对<code class=\"language-text\">Content-Type</code>头部解析处理。</li>\n<li><a href=\"https://www.npmjs.com/package/cookies\">cookies</a>：对<code class=\"language-text\">Cookie</code>和<code class=\"language-text\">Set-Cookie</code>头部解析与处理。</li>\n<li><a href=\"https://www.npmjs.com/package/fresh\">fresh</a>：响应新鲜度判断。</li>\n<li><a href=\"https://www.npmjs.com/package/parseurl\">parseurl</a>：解析 URL，并具有 memoization 功能。</li>\n<li><a href=\"https://www.npmjs.com/package/statuses\">statues</a>：HTTP 状态码与状态信息处理。</li>\n<li><a href=\"https://www.npmjs.com/package/vary\">vary</a>：<code class=\"language-text\">Vary</code>头部处理。</li>\n</ul>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>个人认为 Koa 两个核心的亮点是：</p>\n<ul>\n<li><strong>异步函数</strong>形式中间件</li>\n<li>挂载在 context 对象上面的<strong>统一的 getter 与 setter</strong></li>\n</ul>\n<p>当然了，要想开发实际的 Web 应用，Koa 本身还欠缺很多，需要使用中间件来弥补，另外 Koa 及 Koa 中间件的维护状态近一两年不太活跃，中间件也没有 express 丰富。</p>","timeToRead":6,"excerpt":"Koa 号称为 Node.js 的下一代 Web 框架。从多年以前的 Express 一枝独秀来看，确实如此，相比 Express 的函数回调写法，使用异步函数（或生成器函数）逻辑更符合人的思维，也避免回调嵌套。另外，虽然叫“框架”，但是与其他语言大而全的框架明显不同，Koa…","frontmatter":{"title":"Koa 源码介绍","cover":"","date":"2019-09-11","category":"Node.js","tags":["源码","Koa","HTTP"]},"fields":{"slug":"/read-koa-source/","date":"2019-09-10T16:00:00.000Z"}}},"pageContext":{"slug":"/read-koa-source/"}},"staticQueryHashes":[]}