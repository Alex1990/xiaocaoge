{"componentChunkName":"component---src-templates-post-jsx","path":"/infix-prefix-and-postfix-expressions/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"概念\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E5%BF%B5\" aria-label=\"概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概念</h2>\n<p>通常，我们从小学开始接触到最常见的数学表达式，都是形如<code class=\"language-text\">A * B</code>或<code class=\"language-text\">A + B * C</code>之类的，即<strong>运算符/操作符</strong>在两个<strong>操作数</strong>的中间，这被称为<strong>中缀表达式（infix expression）</strong>。中缀表达式在处理<code class=\"language-text\">A + B * C</code>之类的表达式时，需要知道操作符<code class=\"language-text\">+</code>/<code class=\"language-text\">*</code>的<strong>优先级（precedence）</strong>，然后才能根据优先级高低确定计算顺序。另外，括号也会影响计算顺序，计算机程序在解析中缀表达式时，确定计算顺序比较复杂，可以通过加括号来使得不需要知道各操作符的优先级就可以确定计算顺序。比如，有表达式<code class=\"language-text\">A + B * C + D</code>，可以被写成<code class=\"language-text\">((A + (B * C)) + D)</code>。</p>\n<p><strong>前缀表达式（prefix expression）</strong>，又被称为<strong>波兰表达式（Polish expression）</strong>，是因为它是波兰逻辑学家发明的一种记法。顾名思义，前缀表达式是把操作符放到操作数的前面，比如<code class=\"language-text\">+ A B</code>，意思是<code class=\"language-text\">A</code>与<code class=\"language-text\">B</code>进行<code class=\"language-text\">+</code>操作，也可以使用多个操作数，比如<code class=\"language-text\">+ A B C</code>，意思是<code class=\"language-text\">A</code>、<code class=\"language-text\">B</code>和<code class=\"language-text\">C</code>进行<code class=\"language-text\">+</code>操作。假如固定有且只有两个操作数，则括号省略时不影响计算顺序的判断，比如中缀表达式<code class=\"language-text\">(A + B) * C</code>可写成前缀表达式<code class=\"language-text\">* (+ A B) C</code>，因为操作符只能对两个操作数计算，所以括号是可以省略的，即<code class=\"language-text\">* + A B C</code>。</p>\n<p><strong>后缀表达式（postfix expression）</strong>，又被称为<strong>逆波兰表达式（Reverse Polish expression）</strong>，是为了与波兰表达式的叫法对应。后缀表达式是把操作符放到操作数的后面，比如<code class=\"language-text\">A B +</code>。</p>\n<p><strong>如无特殊说明，下面前缀与后缀表达式当中一个操作符的操作数均限制为两个</strong></p>\n<h2 id=\"计算表达式\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F\" aria-label=\"计算表达式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算表达式</h2>\n<p>前缀与中缀表达式计算实现比后缀要复杂些。</p>\n<p>下面的计算只针对加减乘除四个操作。</p>\n<h3 id=\"计算前缀表达式\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E5%89%8D%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F\" aria-label=\"计算前缀表达式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算前缀表达式</h3>\n<p>使用栈来计算：</p>\n<ol>\n<li>结构体<code class=\"language-text\">EvalTuple</code>，其有三个属性：<code class=\"language-text\">char operator</code>、<code class=\"language-text\">double operand</code>、<code class=\"language-text\">int count</code>，分别用来存储操作符、操作符作用的第一个操作数、操作数作用的操作数个数。</li>\n<li>栈<code class=\"language-text\">EvalTupleStack</code>用来存储结构体<code class=\"language-text\">EvalTuple</code>。</li>\n<li>合法的前缀表达式<code class=\"language-text\">prefix_exp</code>，其为字符串。</li>\n<li>从左至右遍历<code class=\"language-text\">prefix_exp</code>，<code class=\"language-text\">ch</code>为遍历的当前字符串。</li>\n<li>如果<code class=\"language-text\">ch</code>为空白字符串，则处理下一个字符。</li>\n<li>如果<code class=\"language-text\">ch</code>为操作符（加减乘除），则创建一个<code class=\"language-text\">EvalTuple</code>类型结构体<code class=\"language-text\">tuple</code>。然后，<code class=\"language-text\">tuple.operator</code>值为<code class=\"language-text\">ch</code>，<code class=\"language-text\">tuple-&gt;count</code>值为<code class=\"language-text\">0</code>，并将<code class=\"language-text\">tuple</code>推入栈<code class=\"language-text\">EvalTupleStack</code>当中，然后处理下一个字符。</li>\n<li>如果<code class=\"language-text\">ch</code>为其他，则从字符串<code class=\"language-text\">prefix_exp</code>当前索引开始往后匹配最长的合法数值,设其为<code class=\"language-text\">num</code>，设<code class=\"language-text\">nextIndex</code>为该数值后面字符的索引。对<code class=\"language-text\">EvalTupleStack</code>进行遍历：</li>\n<li>如果为空，则中止遍历；</li>\n<li>设<code class=\"language-text\">top_tuple</code>为<code class=\"language-text\">EvalTupleStack</code>最顶部的元素，如果<code class=\"language-text\">top_tuple.count</code>值为<code class=\"language-text\">0</code>，则<code class=\"language-text\">top_tuple.operand</code>值为<code class=\"language-text\">num</code>，<code class=\"language-text\">top.count</code>值为<code class=\"language-text\">1</code>，并中止遍历；如果<code class=\"language-text\">top_tuple.count</code>值不为<code class=\"language-text\">0</code>，则<code class=\"language-text\">num</code>值为<code class=\"language-text\">top_tuple.operand</code>与<code class=\"language-text\">num</code>进行<code class=\"language-text\">top_tuple.operator</code>计算后的结果，然后将<code class=\"language-text\">top_tuple</code>出栈，如果<code class=\"language-text\">EvalTupleStack</code>为空，则前缀表达式的计算结果<code class=\"language-text\">result</code>为<code class=\"language-text\">num</code>。</li>\n<li>从<code class=\"language-text\">nextIndex</code>索引位置开始遍历<code class=\"language-text\">prefix_exp</code>。</li>\n<li>遍历完成<code class=\"language-text\">prefix_exp</code>后，返回<code class=\"language-text\">result</code>。</li>\n</ol>\n<p>下面使用 C 代码过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">EvalTuple</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> operator<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> operand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span>\n<span class=\"token function\">prefix_eval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> result<span class=\"token punctuation\">;</span>\n  Stack s <span class=\"token operator\">=</span> <span class=\"token function\">create_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      EvalTupleType tuple<span class=\"token punctuation\">;</span>\n\n      tuple <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">EvalTuple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tuple <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Out of memory!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      tuple<span class=\"token operator\">-></span>operator <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">;</span>\n      tuple<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nextIndex<span class=\"token punctuation\">;</span>\n      EvalTupleType top_tuple<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token function\">strtod</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nextIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        top_tuple <span class=\"token operator\">=</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top_tuple<span class=\"token operator\">-></span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>top_tuple<span class=\"token operator\">-></span>operator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n              num <span class=\"token operator\">=</span> top_tuple<span class=\"token operator\">-></span>operand <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n              num <span class=\"token operator\">=</span> top_tuple<span class=\"token operator\">-></span>operand <span class=\"token operator\">-</span> num<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n              num <span class=\"token operator\">=</span> top_tuple<span class=\"token operator\">-></span>operand <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n              num <span class=\"token operator\">=</span> top_tuple<span class=\"token operator\">-></span>operand <span class=\"token operator\">/</span> num<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          top_tuple<span class=\"token operator\">-></span>operand <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n          top_tuple<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      cp <span class=\"token operator\">=</span> nextIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"计算后缀表达式\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F\" aria-label=\"计算后缀表达式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算后缀表达式</h3>\n<p>后缀表达式的计算很简单：</p>\n<ol>\n<li>栈<code class=\"language-text\">S</code>，其元素为数值类型。</li>\n<li>数值变量<code class=\"language-text\">a</code>、<code class=\"language-text\">b</code>，用于求值过程中。</li>\n<li>将要求值的后缀表达式为<code class=\"language-text\">postfix_exp</code>，类型为字符串。</li>\n<li>对<code class=\"language-text\">postfix_exp</code>从左至右进行遍历，当前遍历字符为<code class=\"language-text\">ch</code>:</li>\n<li>如果<code class=\"language-text\">ch</code>为空白字符串，则直接遍历下一个字符；</li>\n<li>如果<code class=\"language-text\">ch</code>为操作符（加减乘除），则对<code class=\"language-text\">S</code>进行出栈操作两次，取出的元素分别赋值给<code class=\"language-text\">a</code>和<code class=\"language-text\">b</code>。然后，根据<code class=\"language-text\">ch</code>对<code class=\"language-text\">a</code>和<code class=\"language-text\">b</code>进行运算，其计算结果推入栈<code class=\"language-text\">S</code>中，然后遍历下一个字符；</li>\n<li>如果为其他，则从当前索引位置向后匹配最长的合法数值<code class=\"language-text\">num</code>，数值后面一位字符索引为<code class=\"language-text\">nextIndex</code>，将<code class=\"language-text\">num</code>推入栈<code class=\"language-text\">S</code>中，然后从索引<code class=\"language-text\">nextIndex</code>位置开始遍历。</li>\n<li>遍历结束之后，返回<code class=\"language-text\">S</code>顶部的元素，即为最终计算结果。</li>\n</ol>\n<p>下面是 C 代码过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">double</span>\n<span class=\"token function\">postfix_eval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>postfix_exp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> postfix_exp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> result<span class=\"token punctuation\">;</span>\n  Stack s <span class=\"token operator\">=</span> <span class=\"token function\">create_stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      b <span class=\"token operator\">=</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      a <span class=\"token operator\">=</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n          <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      cp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>endp<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token function\">strtod</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>endp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cp <span class=\"token operator\">=</span> endp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Infix_notation\">Infix notation</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Polish_notation\">Polish notation</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">Reverse Polish notation</a></li>\n<li><a href=\"http://interactivepython.org/runestone/static/pythonds/BasicDS/InfixPrefixandPostfixExpressions.html\">Infix, Prefix and Postfix Expressions</a></li>\n</ul>","timeToRead":6,"excerpt":"概念 通常，我们从小学开始接触到最常见的数学表达式，都是形如或之类的，即运算符/操作符在两个操作数的中间，这被称为中缀表达式（infix expression）。中缀表达式在处理之类的表达式时，需要知道操作符/的优先级（precedence…","frontmatter":{"title":"中缀、前缀和后缀表达式","cover":"","date":"2017-06-07","category":"算法","tags":["前缀","中缀","后缀","栈"]},"fields":{"slug":"/infix-prefix-and-postfix-expressions/","date":"2017-06-06T16:00:00.000Z"}}},"pageContext":{"slug":"/infix-prefix-and-postfix-expressions/"}},"staticQueryHashes":[]}