{"version":3,"sources":["webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/components/Footer/Footer.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["PostListing","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","title","date","excerpt","timeToRead","render","year","className","map","post","index","postYear","moment","article","key","to","dateTime","format","Fragment","React","Component","Footer","copyright","config","Index","data","allMarkdownRemark","edges","location","Helmet","siteTitle","SEO","pageQuery","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","definition","description","image","postNode","postPath","postSEO","postMeta","siteDescription","siteLogo","urljoin","siteUrl","pathPrefix","name","content","rel","type","href"],"mappings":"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","file":"component---src-pages-index-jsx-e6578ab14dc5bd9704d2.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport moment from 'moment';\nimport \"./PostListing.css\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    let year;\n\n    return (\n      <div className=\"wrapper post-list\">\n        {/* Your post list here. */\n        postList.map((post, index) => {\n          const postYear = moment(post.date).year();\n          const article = (\n            <article key={index}>\n              <h1>\n                <Link to={post.path} key={post.title}>\n                  {post.title}\n                </Link>\n              </h1>\n              <div className=\"post-meta\">\n                <time dateTime={post.date}>{moment(post.date).format('YYYY-MM-DD')}</time>\n              </div>\n            </article>\n          );\n          if (year !== postYear) {\n            year = postYear;\n            return (\n              <React.Fragment key={index}>\n                <div className=\"year-label\">&#8727; {postYear} &#8727;</div>\n                {article}\n              </React.Fragment>\n            );\n          }\n          return article;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n  render() {\n    const { config } = this.props;\n    const { copyright } = config;\n    if (!copyright) {\n      return null;\n    }\n    return (\n      <footer className=\"footer\">\n        <p className=\"copyright\">{copyright}</p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport Footer from \"../components/Footer/Footer\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"index-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <PostListing postEdges={postEdges} />\n          <Footer config={config} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n        <link rel=\"icon\" type=\"image/png\" href=\"/favicon/favicon.png\" />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}